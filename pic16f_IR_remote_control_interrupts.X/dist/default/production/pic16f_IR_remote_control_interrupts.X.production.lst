

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Apr 14 18:28:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F876A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118                           
   119                           	psect	stringtext
   120  0500                     __pstringtext:	
   121  0500                     stringtab:	
   122  0500                     __stringtab:	
   123                           
   124                           ;	String table - string pointers are 2 bytes each
   125  0500  1BFF               	btfsc	btemp+1,7
   126  0501  2D0A               	ljmp	stringcode
   127  0502  1383               	bcf	3,7
   128  0503  187F               	btfsc	btemp+1,0
   129  0504  1783               	bsf	3,7
   130  0505  0800               	movf	0,w
   131  0506  0A84               	incf	4,f
   132  0507  1903               	skipnz
   133  0508  0AFF               	incf	btemp+1,f
   134  0509  0008               	return
   135  050A                     stringcode:	
   136  050A  087F               	movf	btemp+1,w
   137  050B  397F               	andlw	127
   138  050C  008A               	movwf	10
   139  050D  0804               	movf	4,w
   140  050E  0A84               	incf	4,f
   141  050F  1903               	skipnz
   142  0510  0AFF               	incf	btemp+1,f
   143  0511  0082               	movwf	2
   144  0512                     __stringbase:	
   145  0512                     __end_of__stringtab:	
   146  0512                     _dpowers:	
   147  0512  3401               	retlw	1
   148  0513  3400               	retlw	0
   149  0514  340A               	retlw	10
   150  0515  3400               	retlw	0
   151  0516  3464               	retlw	100
   152  0517  3400               	retlw	0
   153  0518  34E8               	retlw	232
   154  0519  3403               	retlw	3
   155  051A  3410               	retlw	16
   156  051B  3427               	retlw	39
   157  051C                     __end_of_dpowers:	
   158  000E                     _TMR1	set	14
   159  001A                     _RCREG	set	26
   160  0019                     _TXREG	set	25
   161  0018                     _RCSTAbits	set	24
   162  0007                     _PORTCbits	set	7
   163  0005                     _PORTA	set	5
   164  0006                     _PORTBbits	set	6
   165  0010                     _T1CONbits	set	16
   166  000C                     _PIR1bits	set	12
   167  000B                     _INTCONbits	set	11
   168  0005                     _PORTAbits	set	5
   169  008C                     _PIE1bits	set	140
   170  0099                     _SPBRG	set	153
   171  0098                     _TXSTAbits	set	152
   172  0087                     _TRISCbits	set	135
   173  0087                     _TRISC	set	135
   174  0086                     _TRISB	set	134
   175  0085                     _TRISA	set	133
   176  009F                     _ADCON1bits	set	159
   177  051C                     STR_12:	
   178  051C  3444               	retlw	68	;'D'
   179  051D  3469               	retlw	105	;'i'
   180  051E  3467               	retlw	103	;'g'
   181  051F  3469               	retlw	105	;'i'
   182  0520  3474               	retlw	116	;'t'
   183  0521  3461               	retlw	97	;'a'
   184  0522  3472               	retlw	114	;'r'
   185  0523  3465               	retlw	101	;'e'
   186  0524  3420               	retlw	32	;' '
   187  0525  3471               	retlw	113	;'q'
   188  0526  3475               	retlw	117	;'u'
   189  0527  3461               	retlw	97	;'a'
   190  0528  346E               	retlw	110	;'n'
   191  0529  3474               	retlw	116	;'t'
   192  052A  3465               	retlw	101	;'e'
   193  052B  3420               	retlw	32	;' '
   194  052C  3476               	retlw	118	;'v'
   195  052D  346F               	retlw	111	;'o'
   196  052E  346C               	retlw	108	;'l'
   197  052F  3474               	retlw	116	;'t'
   198  0530  3465               	retlw	101	;'e'
   199  0531  3420               	retlw	32	;' '
   200  0532  3472               	retlw	114	;'r'
   201  0533  3469               	retlw	105	;'i'
   202  0534  3470               	retlw	112	;'p'
   203  0535  3472               	retlw	114	;'r'
   204  0536  346F               	retlw	111	;'o'
   205  0537  3464               	retlw	100	;'d'
   206  0538  3475               	retlw	117	;'u'
   207  0539  3472               	retlw	114	;'r'
   208  053A  3472               	retlw	114	;'r'
   209  053B  3465               	retlw	101	;'e'
   210  053C  3420               	retlw	32	;' '
   211  053D  346C               	retlw	108	;'l'
   212  053E  3461               	retlw	97	;'a'
   213  053F  3420               	retlw	32	;' '
   214  0540  3473               	retlw	115	;'s'
   215  0541  3465               	retlw	101	;'e'
   216  0542  3471               	retlw	113	;'q'
   217  0543  3475               	retlw	117	;'u'
   218  0544  3465               	retlw	101	;'e'
   219  0545  346E               	retlw	110	;'n'
   220  0546  347A               	retlw	122	;'z'
   221  0547  3461               	retlw	97	;'a'
   222  0548  343A               	retlw	58	;':'
   223  0549  3420               	retlw	32	;' '
   224  054A  3400               	retlw	0
   225  054B                     STR_2:	
   226  054B  3452               	retlw	82	;'R'
   227  054C  3465               	retlw	101	;'e'
   228  054D  3467               	retlw	103	;'g'
   229  054E  3469               	retlw	105	;'i'
   230  054F  3473               	retlw	115	;'s'
   231  0550  3474               	retlw	116	;'t'
   232  0551  3472               	retlw	114	;'r'
   233  0552  3461               	retlw	97	;'a'
   234  0553  3472               	retlw	114	;'r'
   235  0554  3465               	retlw	101	;'e'
   236  0555  3428               	retlw	40	;'('
   237  0556  3465               	retlw	101	;'e'
   238  0557  3429               	retlw	41	;')'
   239  0558  342C               	retlw	44	;','
   240  0559  3420               	retlw	32	;' '
   241  055A  3472               	retlw	114	;'r'
   242  055B  3469               	retlw	105	;'i'
   243  055C  3470               	retlw	112	;'p'
   244  055D  3472               	retlw	114	;'r'
   245  055E  346F               	retlw	111	;'o'
   246  055F  3464               	retlw	100	;'d'
   247  0560  3475               	retlw	117	;'u'
   248  0561  3472               	retlw	114	;'r'
   249  0562  3472               	retlw	114	;'r'
   250  0563  3465               	retlw	101	;'e'
   251  0564  3428               	retlw	40	;'('
   252  0565  3469               	retlw	105	;'i'
   253  0566  3429               	retlw	41	;')'
   254  0567  3420               	retlw	32	;' '
   255  0568  346F               	retlw	111	;'o'
   256  0569  3420               	retlw	32	;' '
   257  056A  3474               	retlw	116	;'t'
   258  056B  3465               	retlw	101	;'e'
   259  056C  3473               	retlw	115	;'s'
   260  056D  3474               	retlw	116	;'t'
   261  056E  3428               	retlw	40	;'('
   262  056F  3474               	retlw	116	;'t'
   263  0570  3429               	retlw	41	;')'
   264  0571  343A               	retlw	58	;':'
   265  0572  3420               	retlw	32	;' '
   266  0573  3400               	retlw	0
   267  0574                     STR_15:	
   268  0574  3445               	retlw	69	;'E'
   269  0575  3452               	retlw	82	;'R'
   270  0576  3452               	retlw	82	;'R'
   271  0577  344F               	retlw	79	;'O'
   272  0578  3452               	retlw	82	;'R'
   273  0579  3445               	retlw	69	;'E'
   274  057A  343A               	retlw	58	;':'
   275  057B  3420               	retlw	32	;' '
   276  057C  3464               	retlw	100	;'d'
   277  057D  3469               	retlw	105	;'i'
   278  057E  3467               	retlw	103	;'g'
   279  057F  3469               	retlw	105	;'i'
   280  0580  3474               	retlw	116	;'t'
   281  0581  3461               	retlw	97	;'a'
   282  0582  3472               	retlw	114	;'r'
   283  0583  3465               	retlw	101	;'e'
   284  0584  3420               	retlw	32	;' '
   285  0585  3427               	retlw	39	;'''
   286  0586  3465               	retlw	101	;'e'
   287  0587  3427               	retlw	39	;'''
   288  0588  342C               	retlw	44	;','
   289  0589  3420               	retlw	32	;' '
   290  058A  3427               	retlw	39	;'''
   291  058B  3469               	retlw	105	;'i'
   292  058C  3427               	retlw	39	;'''
   293  058D  3420               	retlw	32	;' '
   294  058E  346F               	retlw	111	;'o'
   295  058F  3420               	retlw	32	;' '
   296  0590  3427               	retlw	39	;'''
   297  0591  3474               	retlw	116	;'t'
   298  0592  3427               	retlw	39	;'''
   299  0593  342E               	retlw	46	;'.'
   300  0594  340A               	retlw	10
   301  0595  340D               	retlw	13
   302  0596  3400               	retlw	0
   303  0597                     STR_7:	
   304  0597  3453               	retlw	83	;'S'
   305  0598  3465               	retlw	101	;'e'
   306  0599  346C               	retlw	108	;'l'
   307  059A  3465               	retlw	101	;'e'
   308  059B  347A               	retlw	122	;'z'
   309  059C  3469               	retlw	105	;'i'
   310  059D  346F               	retlw	111	;'o'
   311  059E  3461               	retlw	97	;'a'
   312  059F  3472               	retlw	114	;'r'
   313  05A0  3465               	retlw	101	;'e'
   314  05A1  3420               	retlw	32	;' '
   315  05A2  3469               	retlw	105	;'i'
   316  05A3  346C               	retlw	108	;'l'
   317  05A4  3420               	retlw	32	;' '
   318  05A5  3470               	retlw	112	;'p'
   319  05A6  3465               	retlw	101	;'e'
   320  05A7  3472               	retlw	114	;'r'
   321  05A8  3469               	retlw	105	;'i'
   322  05A9  346F               	retlw	111	;'o'
   323  05AA  3464               	retlw	100	;'d'
   324  05AB  346F               	retlw	111	;'o'
   325  05AC  342E               	retlw	46	;'.'
   326  05AD  340A               	retlw	10
   327  05AE  340D               	retlw	13
   328  05AF  3400               	retlw	0
   329  05B0                     STR_14:	
   330  05B0  3452               	retlw	82	;'R'
   331  05B1  3465               	retlw	101	;'e'
   332  05B2  3473               	retlw	115	;'s'
   333  05B3  3465               	retlw	101	;'e'
   334  05B4  3474               	retlw	116	;'t'
   335  05B5  3474               	retlw	116	;'t'
   336  05B6  3461               	retlw	97	;'a'
   337  05B7  3472               	retlw	114	;'r'
   338  05B8  3465               	retlw	101	;'e'
   339  05B9  3420               	retlw	32	;' '
   340  05BA  3470               	retlw	112	;'p'
   341  05BB  3465               	retlw	101	;'e'
   342  05BC  3472               	retlw	114	;'r'
   343  05BD  3420               	retlw	32	;' '
   344  05BE  3475               	retlw	117	;'u'
   345  05BF  3473               	retlw	115	;'s'
   346  05C0  3463               	retlw	99	;'c'
   347  05C1  3469               	retlw	105	;'i'
   348  05C2  3472               	retlw	114	;'r'
   349  05C3  3465               	retlw	101	;'e'
   350  05C4  342E               	retlw	46	;'.'
   351  05C5  340A               	retlw	10
   352  05C6  340D               	retlw	13
   353  05C7  3400               	retlw	0
   354  05C8                     STR_13:	
   355  05C8  3452               	retlw	82	;'R'
   356  05C9  3469               	retlw	105	;'i'
   357  05CA  3470               	retlw	112	;'p'
   358  05CB  3472               	retlw	114	;'r'
   359  05CC  346F               	retlw	111	;'o'
   360  05CD  3464               	retlw	100	;'d'
   361  05CE  3475               	retlw	117	;'u'
   362  05CF  3463               	retlw	99	;'c'
   363  05D0  3465               	retlw	101	;'e'
   364  05D1  346E               	retlw	110	;'n'
   365  05D2  3464               	retlw	100	;'d'
   366  05D3  346F               	retlw	111	;'o'
   367  05D4  342E               	retlw	46	;'.'
   368  05D5  342E               	retlw	46	;'.'
   369  05D6  342E               	retlw	46	;'.'
   370  05D7  340A               	retlw	10
   371  05D8  340D               	retlw	13
   372  05D9  3400               	retlw	0
   373  05DA                     STR_4:	
   374  05DA  3452               	retlw	82	;'R'
   375  05DB  3465               	retlw	101	;'e'
   376  05DC  3467               	retlw	103	;'g'
   377  05DD  3469               	retlw	105	;'i'
   378  05DE  3473               	retlw	115	;'s'
   379  05DF  3474               	retlw	116	;'t'
   380  05E0  3472               	retlw	114	;'r'
   381  05E1  3461               	retlw	97	;'a'
   382  05E2  346E               	retlw	110	;'n'
   383  05E3  3464               	retlw	100	;'d'
   384  05E4  346F               	retlw	111	;'o'
   385  05E5  342E               	retlw	46	;'.'
   386  05E6  342E               	retlw	46	;'.'
   387  05E7  342E               	retlw	46	;'.'
   388  05E8  340A               	retlw	10
   389  05E9  340D               	retlw	13
   390  05EA  3400               	retlw	0
   391  05EB                     STR_5:	
   392  05EB  345B               	retlw	91	;'['
   393  05EC  3425               	retlw	37	;'%'
   394  05ED  3432               	retlw	50	;'2'
   395  05EE  3475               	retlw	117	;'u'
   396  05EF  345D               	retlw	93	;']'
   397  05F0  3420               	retlw	32	;' '
   398  05F1  3425               	retlw	37	;'%'
   399  05F2  3435               	retlw	53	;'5'
   400  05F3  3475               	retlw	117	;'u'
   401  05F4  342D               	retlw	45	;'-'
   402  05F5  3425               	retlw	37	;'%'
   403  05F6  3475               	retlw	117	;'u'
   404  05F7  342C               	retlw	44	;','
   405  05F8  3409               	retlw	9
   406  05F9  3409               	retlw	9
   407  05FA  3400               	retlw	0
   408  05FB                     STR_6:	
   409  05FB  3425               	retlw	37	;'%'
   410  05FC  3435               	retlw	53	;'5'
   411  05FD  3475               	retlw	117	;'u'
   412  05FE  342D               	retlw	45	;'-'
   413  05FF  3425               	retlw	37	;'%'
   414  0600  3475               	retlw	117	;'u'
   415  0601  342C               	retlw	44	;','
   416  0602  340A               	retlw	10
   417  0603  340D               	retlw	13
   418  0604  3400               	retlw	0
   419  0605                     STR_8:	
   420  0605  3449               	retlw	73	;'I'
   421  0606  346E               	retlw	110	;'n'
   422  0607  3469               	retlw	105	;'i'
   423  0608  347A               	retlw	122	;'z'
   424  0609  3469               	retlw	105	;'i'
   425  060A  346F               	retlw	111	;'o'
   426  060B  343A               	retlw	58	;':'
   427  060C  3420               	retlw	32	;' '
   428  060D  3400               	retlw	0
   429  060E                     STR_1:	
   430  060E  3452               	retlw	82	;'R'
   431  060F  3445               	retlw	69	;'E'
   432  0610  3453               	retlw	83	;'S'
   433  0611  3445               	retlw	69	;'E'
   434  0612  3454               	retlw	84	;'T'
   435  0613  340A               	retlw	10
   436  0614  340D               	retlw	13
   437  0615  3400               	retlw	0
   438  0616                     STR_9:	
   439  0616  3446               	retlw	70	;'F'
   440  0617  3469               	retlw	105	;'i'
   441  0618  346E               	retlw	110	;'n'
   442  0619  3465               	retlw	101	;'e'
   443  061A  343A               	retlw	58	;':'
   444  061B  3420               	retlw	32	;' '
   445  061C  3400               	retlw	0
   446  061D                     STR_3:	
   447  061D  3425               	retlw	37	;'%'
   448  061E  3463               	retlw	99	;'c'
   449  061F  340A               	retlw	10
   450  0620  340D               	retlw	13
   451  0621  3400               	retlw	0
   452  05EB                     
   453                           ; #config settings
   454  0000                     
   455                           	psect	cinit
   456  0015                     start_initialization:	
   457  0015                     __initialization:	
   458                           
   459                           ; Clear objects allocated to COMMON
   460  0015  01F8               	clrf	__pbssCOMMON& (0+127)
   461                           
   462                           ; Clear objects allocated to BANK0
   463  0016  1383               	bcf	3,7	;select IRP bank0
   464  0017  304C               	movlw	low __pbssBANK0
   465  0018  0084               	movwf	4
   466  0019  305C               	movlw	low (__pbssBANK0+16)
   467  001A  120A  118A  249B  120A  118A  	fcall	clear_ram0
   468                           
   469                           ; Clear objects allocated to BANK1
   470  001F  30A0               	movlw	low __pbssBANK1
   471  0020  0084               	movwf	4
   472  0021  30D0               	movlw	low (__pbssBANK1+48)
   473  0022  120A  118A  249B  120A  118A  	fcall	clear_ram0
   474                           
   475                           ; Clear objects allocated to BANK3
   476  0027  1783               	bsf	3,7	;select IRP bank2
   477  0028  3090               	movlw	low __pbssBANK3
   478  0029  0084               	movwf	4
   479  002A  30F0               	movlw	low (__pbssBANK3+96)
   480  002B  120A  118A  249B   	fcall	clear_ram0
   481  002E                     end_of_initialization:	
   482                           ;End of C runtime variable initialization code
   483                           
   484  002E                     __end_of__initialization:	
   485  002E  0183               	clrf	3
   486  002F  120A  118A  2832   	ljmp	_main	;jump to C main() function
   487                           
   488                           	psect	bssCOMMON
   489  0078                     __pbssCOMMON:	
   490  0078                     _val:	
   491  0078                     	ds	1
   492                           
   493                           	psect	bssBANK0
   494  004C                     __pbssBANK0:	
   495  004C                     _cycles:	
   496  004C                     	ds	1
   497  004D                     _b:	
   498  004D                     	ds	1
   499  004E                     _a:	
   500  004E                     	ds	1
   501  004F                     _e:	
   502  004F                     	ds	1
   503  0050                     _i:	
   504  0050                     	ds	1
   505  0051                     _c:	
   506  0051                     	ds	1
   507  0052                     _number:	
   508  0052                     	ds	10
   509                           
   510                           	psect	bssBANK1
   511  00A0                     __pbssBANK1:	
   512  00A0                     _array:	
   513  00A0                     	ds	48
   514                           
   515                           	psect	bssBANK3
   516  0190                     __pbssBANK3:	
   517  0190                     _arrayv:	
   518  0190                     	ds	96
   519                           
   520                           	psect	clrtext
   521  049B                     clear_ram0:	
   522                           ;	Called with FSR containing the base address, and
   523                           ;	W with the last address+1
   524                           
   525  049B  0064               	clrwdt	;clear the watchdog before getting into this loop
   526  049C                     clrloop0:	
   527  049C  0180               	clrf	0	;clear RAM location pointed to by FSR
   528  049D  0A84               	incf	4,f	;increment pointer
   529  049E  0604               	xorwf	4,w	;XOR with final address
   530  049F  1903               	btfsc	3,2	;have we reached the end yet?
   531  04A0  3400               	retlw	0	;all done for this memory range, return
   532  04A1  0604               	xorwf	4,w	;XOR again to restore value
   533  04A2  2C9C               	goto	clrloop0	;do the next byte
   534                           
   535                           	psect	cstackCOMMON
   536  0070                     __pcstackCOMMON:	
   537  0070                     ?_isdigit:	
   538  0070                     ?_setup_peripheals:	
   539                           ; 1 bit 
   540                           
   541  0070                     ?_read_char:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_putch:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ?_ISR:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ??_ISR:	
   551                           ; 1 bytes @ 0x0
   552                           
   553                           
   554                           ; 1 bytes @ 0x0
   555  0070                     	ds	5
   556  0075                     ??_setup_peripheals:	
   557  0075                     ??_read_char:	
   558                           ; 1 bytes @ 0x5
   559                           
   560  0075                     ??_isdigit:	
   561                           ; 1 bytes @ 0x5
   562                           
   563  0075                     ??_putch:	
   564                           ; 1 bytes @ 0x5
   565                           
   566  0075                     ??___wmul:	
   567                           ; 1 bytes @ 0x5
   568                           
   569  0075                     ??___lwdiv:	
   570                           ; 1 bytes @ 0x5
   571                           
   572  0075                     putch@c:	
   573                           ; 1 bytes @ 0x5
   574                           
   575  0075                     _isdigit$691:	
   576                           ; 1 bytes @ 0x5
   577                           
   578  0075                     ___wmul@product:	
   579                           ; 1 bytes @ 0x5
   580                           
   581                           
   582                           ; 2 bytes @ 0x5
   583  0075                     	ds	1
   584  0076                     ?_read_line:	
   585  0076                     ??___lwmod:	
   586                           ; 1 bytes @ 0x6
   587                           
   588  0076                     isdigit@c:	
   589                           ; 1 bytes @ 0x6
   590                           
   591  0076                     read_line@max_len:	
   592                           ; 1 bytes @ 0x6
   593                           
   594                           
   595                           ; 2 bytes @ 0x6
   596  0076                     	ds	1
   597  0077                     ___lwmod@counter:	
   598                           
   599                           ; 1 bytes @ 0x7
   600  0077                     	ds	1
   601                           
   602                           	psect	cstackBANK0
   603  0020                     __pcstackBANK0:	
   604  0020                     ??_read_line:	
   605  0020                     ?___wmul:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0020                     ?___lwdiv:	
   609                           ; 2 bytes @ 0x0
   610                           
   611  0020                     ___wmul@multiplier:	
   612                           ; 2 bytes @ 0x0
   613                           
   614  0020                     ___lwdiv@divisor:	
   615                           ; 2 bytes @ 0x0
   616                           
   617                           
   618                           ; 2 bytes @ 0x0
   619  0020                     	ds	2
   620  0022                     read_line@s:	
   621  0022                     ___wmul@multiplicand:	
   622                           ; 1 bytes @ 0x2
   623                           
   624  0022                     ___lwdiv@dividend:	
   625                           ; 2 bytes @ 0x2
   626                           
   627                           
   628                           ; 2 bytes @ 0x2
   629  0022                     	ds	1
   630  0023                     read_line@i:	
   631                           
   632                           ; 2 bytes @ 0x3
   633  0023                     	ds	1
   634  0024                     ?_atoi:	
   635  0024                     ___lwdiv@counter:	
   636                           ; 2 bytes @ 0x4
   637                           
   638                           
   639                           ; 1 bytes @ 0x4
   640  0024                     	ds	1
   641  0025                     read_line@c:	
   642  0025                     ___lwdiv@quotient:	
   643                           ; 1 bytes @ 0x5
   644                           
   645                           
   646                           ; 2 bytes @ 0x5
   647  0025                     	ds	1
   648  0026                     ??_atoi:	
   649                           
   650                           ; 1 bytes @ 0x6
   651  0026                     	ds	1
   652  0027                     ?___lwmod:	
   653  0027                     ___lwmod@divisor:	
   654                           ; 2 bytes @ 0x7
   655                           
   656                           
   657                           ; 2 bytes @ 0x7
   658  0027                     	ds	1
   659  0028                     atoi@sign:	
   660                           
   661                           ; 1 bytes @ 0x8
   662  0028                     	ds	1
   663  0029                     atoi@a:	
   664  0029                     ___lwmod@dividend:	
   665                           ; 2 bytes @ 0x9
   666                           
   667                           
   668                           ; 2 bytes @ 0x9
   669  0029                     	ds	2
   670  002B                     ?_printf:	
   671  002B                     atoi@s:	
   672                           ; 2 bytes @ 0xB
   673                           
   674  002B                     printf@f:	
   675                           ; 1 bytes @ 0xB
   676                           
   677                           
   678                           ; 2 bytes @ 0xB
   679  002B                     	ds	8
   680  0033                     ??_printf:	
   681                           
   682                           ; 1 bytes @ 0x13
   683  0033                     	ds	3
   684  0036                     printf@flag:	
   685                           
   686                           ; 1 bytes @ 0x16
   687  0036                     	ds	1
   688  0037                     printf@cp:	
   689                           
   690                           ; 1 bytes @ 0x17
   691  0037                     	ds	1
   692  0038                     printf@val:	
   693                           
   694                           ; 2 bytes @ 0x18
   695  0038                     	ds	2
   696  003A                     printf@prec:	
   697                           
   698                           ; 1 bytes @ 0x1A
   699  003A                     	ds	1
   700  003B                     printf@ap:	
   701                           
   702                           ; 1 bytes @ 0x1B
   703  003B                     	ds	1
   704  003C                     printf@len:	
   705                           
   706                           ; 2 bytes @ 0x1C
   707  003C                     	ds	2
   708  003E                     printf@width:	
   709                           
   710                           ; 2 bytes @ 0x1E
   711  003E                     	ds	2
   712  0040                     printf@c:	
   713                           
   714                           ; 1 bytes @ 0x20
   715  0040                     	ds	1
   716  0041                     ?_main:	
   717  0041                     main@argc:	
   718                           ; 2 bytes @ 0x21
   719                           
   720                           
   721                           ; 2 bytes @ 0x21
   722  0041                     	ds	2
   723  0043                     main@argv:	
   724                           
   725                           ; 2 bytes @ 0x23
   726  0043                     	ds	2
   727  0045                     ??_main:	
   728                           
   729                           ; 1 bytes @ 0x25
   730  0045                     	ds	7
   731                           
   732                           	psect	maintext
   733  0032                     __pmaintext:	
   734 ;;
   735 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   736 ;;
   737 ;; *************** function _main *****************
   738 ;; Defined at:
   739 ;;		line 32 in file "main.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;  argc            2   33[BANK0 ] int 
   742 ;;  argv            2   35[BANK0 ] PTR PTR unsigned char 
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  2   33[BANK0 ] int 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : B00/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   754 ;;      Params:         0       4       0       0       0
   755 ;;      Locals:         0       0       0       0       0
   756 ;;      Temps:          0       7       0       0       0
   757 ;;      Totals:         0      11       0       0       0
   758 ;;Total ram usage:       11 bytes
   759 ;; Hardware stack levels required when called:    3
   760 ;; This function calls:
   761 ;;		_atoi
   762 ;;		_printf
   763 ;;		_read_char
   764 ;;		_read_line
   765 ;;		_setup_peripheals
   766 ;; This function is called by:
   767 ;;		Startup code after reset
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           
   772                           ;psect for function _main
   773  0032                     _main:	
   774                           
   775                           ;main.c: 33: setup_peripheals();
   776                           
   777                           ;incstack = 0
   778                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   779  0032  120A  118A  2414  120A  118A  	fcall	_setup_peripheals
   780                           
   781                           ;main.c: 34: printf("RESET\n\r");
   782  0037  300E               	movlw	low (STR_1| (0+32768))
   783  0038  1283               	bcf	3,5	;RP0=0, select bank0
   784  0039  1303               	bcf	3,6	;RP1=0, select bank0
   785  003A  00AB               	movwf	printf@f
   786  003B  3086               	movlw	high (STR_1| (0+32768))
   787  003C                     L1:	
   788  003C  00AC               	movwf	printf@f+1
   789  003D  120A  118A  2261  120A  118A  	fcall	_printf
   790  0042                     l1738:	
   791                           ;main.c: 35: while (1) {
   792                           
   793                           
   794                           ;main.c: 36: PORTAbits.RA1 = 0;
   795  0042  1283               	bcf	3,5	;RP0=0, select bank0
   796  0043  1303               	bcf	3,6	;RP1=0, select bank0
   797  0044  1085               	bcf	5,1	;volatile
   798                           
   799                           ;main.c: 37: PORTAbits.RA2 = 0;
   800  0045  1105               	bcf	5,2	;volatile
   801                           
   802                           ;main.c: 38: printf("Registrare(e), riprodurre(i) o test(t): ");
   803  0046  304B               	movlw	low (STR_2| (0+32768))
   804  0047  00AB               	movwf	printf@f
   805  0048  3085               	movlw	high (STR_2| (0+32768))
   806  0049  00AC               	movwf	printf@f+1
   807  004A  120A  118A  2261  120A  118A  	fcall	_printf
   808                           
   809                           ;main.c: 39: c = read_char();
   810  004F  120A  118A  27F4  120A  118A  	fcall	_read_char
   811  0054  1283               	bcf	3,5	;RP0=0, select bank0
   812  0055  1303               	bcf	3,6	;RP1=0, select bank0
   813  0056  00C5               	movwf	??_main
   814  0057  0845               	movf	??_main,w
   815  0058  00D1               	movwf	_c
   816                           
   817                           ;main.c: 40: printf("%c\n\r", c);
   818  0059  301D               	movlw	low (STR_3| (0+32768))
   819  005A  00AB               	movwf	printf@f
   820  005B  3086               	movlw	high (STR_3| (0+32768))
   821  005C  00AC               	movwf	printf@f+1
   822  005D  0851               	movf	_c,w
   823  005E  00C5               	movwf	??_main
   824  005F  01C6               	clrf	??_main+1
   825  0060  0845               	movf	??_main,w
   826  0061  00AD               	movwf	?_printf+2
   827  0062  0846               	movf	??_main+1,w
   828  0063  00AE               	movwf	?_printf+3
   829  0064  120A  118A  2261  120A  118A  	fcall	_printf
   830                           
   831                           ;main.c: 41: if (c == 'e' || c == 'i' || c == 't') {
   832  0069  3065               	movlw	101
   833  006A  1283               	bcf	3,5	;RP0=0, select bank0
   834  006B  1303               	bcf	3,6	;RP1=0, select bank0
   835  006C  0651               	xorwf	_c,w
   836  006D  1903               	btfsc	3,2
   837  006E  2877               	goto	l1754
   838  006F  3069               	movlw	105
   839  0070  0651               	xorwf	_c,w
   840  0071  1903               	btfsc	3,2
   841  0072  2877               	goto	l1754
   842  0073  3074               	movlw	116
   843  0074  0651               	xorwf	_c,w
   844  0075  1D03               	btfss	3,2
   845  0076  2A5D               	goto	l1844
   846  0077                     l1754:	
   847                           
   848                           ;main.c: 42: if (c == 'e') {
   849  0077  3065               	movlw	101
   850  0078  0651               	xorwf	_c,w
   851  0079  1D03               	btfss	3,2
   852  007A  29FE               	goto	l1818
   853                           
   854                           ;main.c: 43: printf("Registrando...\n\r");
   855  007B  30DA               	movlw	low (STR_4| (0+32768))
   856  007C  00AB               	movwf	printf@f
   857  007D  3085               	movlw	high (STR_4| (0+32768))
   858  007E  00AC               	movwf	printf@f+1
   859  007F  120A  118A  2261  120A  118A  	fcall	_printf
   860                           
   861                           ;main.c: 44: i = 0;
   862  0084  1283               	bcf	3,5	;RP0=0, select bank0
   863  0085  1303               	bcf	3,6	;RP1=0, select bank0
   864  0086  01D0               	clrf	_i
   865                           
   866                           ;main.c: 45: TMR1 = 0;
   867  0087  018E               	clrf	14	;volatile
   868  0088  018F               	clrf	15	;volatile
   869                           
   870                           ;main.c: 46: INTCONbits.RBIF = 0;
   871  0089  100B               	bcf	11,0	;volatile
   872                           
   873                           ;main.c: 47: INTCONbits.RBIE = 1;
   874  008A  158B               	bsf	11,3	;volatile
   875                           
   876                           ;main.c: 48: PIR1bits.TMR1IF = 0;
   877  008B  100C               	bcf	12,0	;volatile
   878                           
   879                           ;main.c: 49: T1CONbits.TMR1ON = 1;
   880  008C  1410               	bsf	16,0	;volatile
   881                           
   882                           ;main.c: 50: array[i] = !PORTBbits.RB4;
   883  008D  0850               	movf	_i,w
   884  008E  3EA0               	addlw	(low (_array| 0))& (0+255)
   885  008F  0084               	movwf	4
   886  0090  1003               	clrc
   887  0091  1E06               	btfss	6,4	;volatile
   888  0092  1403               	setc
   889  0093  3000               	movlw	0
   890  0094  1803               	btfsc	3,0
   891  0095  3001               	movlw	1
   892  0096  1383               	bcf	3,7	;select IRP bank1
   893  0097  0080               	movwf	0
   894                           
   895                           ;main.c: 51: PORTAbits.RA1 = !PORTBbits.RB4;
   896  0098  1003               	clrc
   897  0099  1E06               	btfss	6,4	;volatile
   898  009A  1403               	setc
   899  009B  1C03               	btfss	3,0
   900  009C  28A1               	goto	u1920
   901  009D  1283               	bcf	3,5	;RP0=0, select bank0
   902  009E  1303               	bcf	3,6	;RP1=0, select bank0
   903  009F  1485               	bsf	5,1	;volatile
   904  00A0  28A4               	goto	l1774
   905  00A1                     u1920:	
   906  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   907  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   908  00A3  1085               	bcf	5,1	;volatile
   909  00A4                     l1774:	
   910                           
   911                           ;main.c: 52: PORTAbits.RA2 = !PORTBbits.RB4;
   912  00A4  1003               	clrc
   913  00A5  1E06               	btfss	6,4	;volatile
   914  00A6  1403               	setc
   915  00A7  1C03               	btfss	3,0
   916  00A8  28AD               	goto	u1940
   917  00A9  1283               	bcf	3,5	;RP0=0, select bank0
   918  00AA  1303               	bcf	3,6	;RP1=0, select bank0
   919  00AB  1505               	bsf	5,2	;volatile
   920  00AC  28B0               	goto	l1776
   921  00AD                     u1940:	
   922  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   923  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   924  00AF  1105               	bcf	5,2	;volatile
   925  00B0                     l1776:	
   926                           ;main.c: 53: while (i < 48);
   927                           
   928  00B0  3030               	movlw	48
   929  00B1  0250               	subwf	_i,w
   930  00B2  1C03               	skipc
   931  00B3  28B0               	goto	l1776
   932                           
   933                           ;main.c: 54: PORTAbits.RA1 = 0;
   934  00B4  1085               	bcf	5,1	;volatile
   935                           
   936                           ;main.c: 55: PORTAbits.RA2 = 0;
   937  00B5  1105               	bcf	5,2	;volatile
   938                           
   939                           ;main.c: 56: for (i = 0; i < 48; i++) {
   940  00B6  01D0               	clrf	_i
   941  00B7  3030               	movlw	48
   942  00B8  0250               	subwf	_i,w
   943  00B9  1803               	btfsc	3,0
   944  00BA  292D               	goto	l1794
   945  00BB                     l1784:	
   946                           
   947                           ;main.c: 57: printf("[%2u] %5u-%u,\t\t", i, arrayv[i], array[i]);
   948  00BB  30EB               	movlw	low (STR_5| (0+32768))
   949  00BC  00AB               	movwf	printf@f
   950  00BD  3085               	movlw	high (STR_5| (0+32768))
   951  00BE  00AC               	movwf	printf@f+1
   952  00BF  0850               	movf	_i,w
   953  00C0  00C5               	movwf	??_main
   954  00C1  01C6               	clrf	??_main+1
   955  00C2  0845               	movf	??_main,w
   956  00C3  00AD               	movwf	?_printf+2
   957  00C4  0846               	movf	??_main+1,w
   958  00C5  00AE               	movwf	?_printf+3
   959  00C6  0850               	movf	_i,w
   960  00C7  00C7               	movwf	??_main+2
   961  00C8  0747               	addwf	??_main+2,w
   962  00C9  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
   963  00CA  0084               	movwf	4
   964  00CB  1783               	bsf	3,7	;select IRP bank3
   965  00CC  0800               	movf	0,w
   966  00CD  00AF               	movwf	?_printf+4
   967  00CE  0A84               	incf	4,f
   968  00CF  0800               	movf	0,w
   969  00D0  00B0               	movwf	?_printf+5
   970  00D1  0850               	movf	_i,w
   971  00D2  3EA0               	addlw	(low (_array| 0))& (0+255)
   972  00D3  0084               	movwf	4
   973  00D4  1383               	bcf	3,7	;select IRP bank1
   974  00D5  0800               	movf	0,w
   975  00D6  00C8               	movwf	??_main+3
   976  00D7  01C9               	clrf	??_main+4
   977  00D8  0848               	movf	??_main+3,w
   978  00D9  00B1               	movwf	?_printf+6
   979  00DA  0849               	movf	??_main+4,w
   980  00DB  00B2               	movwf	?_printf+7
   981  00DC  120A  118A  2261  120A  118A  	fcall	_printf
   982                           
   983                           ;main.c: 58: arrayv[i] = 0xFFFF - arrayv[i];
   984  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   985  00E2  1303               	bcf	3,6	;RP1=0, select bank0
   986  00E3  0850               	movf	_i,w
   987  00E4  00C5               	movwf	??_main
   988  00E5  0745               	addwf	??_main,w
   989  00E6  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
   990  00E7  0084               	movwf	4
   991  00E8  1783               	bsf	3,7	;select IRP bank3
   992  00E9  0800               	movf	0,w
   993  00EA  00C6               	movwf	??_main+1
   994  00EB  0A84               	incf	4,f
   995  00EC  0800               	movf	0,w
   996  00ED  00C7               	movwf	??_main+2
   997  00EE  09C6               	comf	??_main+1,f
   998  00EF  09C7               	comf	??_main+2,f
   999  00F0  0AC6               	incf	??_main+1,f
  1000  00F1  1903               	skipnz
  1001  00F2  0AC7               	incf	??_main+2,f
  1002  00F3  0846               	movf	??_main+1,w
  1003  00F4  3EFF               	addlw	255
  1004  00F5  00C8               	movwf	??_main+3
  1005  00F6  0847               	movf	??_main+2,w
  1006  00F7  1803               	skipnc
  1007  00F8  3E01               	addlw	1
  1008  00F9  3EFF               	addlw	255
  1009  00FA  00C9               	movwf	??_main+4
  1010  00FB  0850               	movf	_i,w
  1011  00FC  00CA               	movwf	??_main+5
  1012  00FD  074A               	addwf	??_main+5,w
  1013  00FE  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  1014  00FF  0084               	movwf	4
  1015  0100  0848               	movf	??_main+3,w
  1016  0101  0080               	movwf	0
  1017  0102  0A84               	incf	4,f
  1018  0103  0849               	movf	??_main+4,w
  1019  0104  0080               	movwf	0
  1020                           
  1021                           ;main.c: 59: printf("%5u-%u,\n\r", arrayv[i], array[i]);
  1022  0105  30FB               	movlw	low (STR_6| (0+32768))
  1023  0106  00AB               	movwf	printf@f
  1024  0107  3085               	movlw	high (STR_6| (0+32768))
  1025  0108  00AC               	movwf	printf@f+1
  1026  0109  0850               	movf	_i,w
  1027  010A  00C5               	movwf	??_main
  1028  010B  0745               	addwf	??_main,w
  1029  010C  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  1030  010D  0084               	movwf	4
  1031  010E  0800               	movf	0,w
  1032  010F  00AD               	movwf	?_printf+2
  1033  0110  0A84               	incf	4,f
  1034  0111  0800               	movf	0,w
  1035  0112  00AE               	movwf	?_printf+3
  1036  0113  0850               	movf	_i,w
  1037  0114  3EA0               	addlw	(low (_array| 0))& (0+255)
  1038  0115  0084               	movwf	4
  1039  0116  1383               	bcf	3,7	;select IRP bank1
  1040  0117  0800               	movf	0,w
  1041  0118  00C6               	movwf	??_main+1
  1042  0119  01C7               	clrf	??_main+2
  1043  011A  0846               	movf	??_main+1,w
  1044  011B  00AF               	movwf	?_printf+4
  1045  011C  0847               	movf	??_main+2,w
  1046  011D  00B0               	movwf	?_printf+5
  1047  011E  120A  118A  2261  120A  118A  	fcall	_printf
  1048  0123  3001               	movlw	1
  1049  0124  1283               	bcf	3,5	;RP0=0, select bank0
  1050  0125  1303               	bcf	3,6	;RP1=0, select bank0
  1051  0126  00C5               	movwf	??_main
  1052  0127  0845               	movf	??_main,w
  1053  0128  07D0               	addwf	_i,f
  1054  0129  3030               	movlw	48
  1055  012A  0250               	subwf	_i,w
  1056  012B  1C03               	skipc
  1057  012C  28BB               	goto	l1784
  1058  012D                     l1794:	
  1059                           
  1060                           ;main.c: 60: }
  1061                           ;main.c: 61: printf("Selezioare il periodo.\n\r");
  1062  012D  3097               	movlw	low (STR_7| (0+32768))
  1063  012E  00AB               	movwf	printf@f
  1064  012F  3085               	movlw	high (STR_7| (0+32768))
  1065  0130  00AC               	movwf	printf@f+1
  1066  0131  120A  118A  2261  120A  118A  	fcall	_printf
  1067                           
  1068                           ;main.c: 62: printf("Inizio: ");
  1069  0136  3005               	movlw	low (STR_8| (0+32768))
  1070  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1071  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1072  0139  00AB               	movwf	printf@f
  1073  013A  3086               	movlw	high (STR_8| (0+32768))
  1074  013B  00AC               	movwf	printf@f+1
  1075  013C  120A  118A  2261  120A  118A  	fcall	_printf
  1076                           
  1077                           ;main.c: 63: read_line(number, 10);
  1078  0141  300A               	movlw	10
  1079  0142  00F6               	movwf	read_line@max_len
  1080  0143  3000               	movlw	0
  1081  0144  00F7               	movwf	read_line@max_len+1
  1082  0145  3052               	movlw	(low (_number| 0))& (0+255)
  1083  0146  120A  118A  2622  120A  118A  	fcall	_read_line
  1084                           
  1085                           ;main.c: 64: a = atoi(number);
  1086  014B  3052               	movlw	(low (_number| 0))& (0+255)
  1087  014C  120A  118A  2722  120A  118A  	fcall	_atoi
  1088  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1089  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1090  0153  0824               	movf	?_atoi,w
  1091  0154  00C5               	movwf	??_main
  1092  0155  0845               	movf	??_main,w
  1093  0156  00CE               	movwf	_a
  1094                           
  1095                           ;main.c: 65: printf("Fine: ");
  1096  0157  3016               	movlw	low (STR_9| (0+32768))
  1097  0158  00AB               	movwf	printf@f
  1098  0159  3086               	movlw	high (STR_9| (0+32768))
  1099  015A  00AC               	movwf	printf@f+1
  1100  015B  120A  118A  2261  120A  118A  	fcall	_printf
  1101                           
  1102                           ;main.c: 66: read_line(number, 10);
  1103  0160  300A               	movlw	10
  1104  0161  00F6               	movwf	read_line@max_len
  1105  0162  3000               	movlw	0
  1106  0163  00F7               	movwf	read_line@max_len+1
  1107  0164  3052               	movlw	(low (_number| 0))& (0+255)
  1108  0165  120A  118A  2622  120A  118A  	fcall	_read_line
  1109                           
  1110                           ;main.c: 67: b = atoi(number);
  1111  016A  3052               	movlw	(low (_number| 0))& (0+255)
  1112  016B  120A  118A  2722  120A  118A  	fcall	_atoi
  1113  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1115  0172  0824               	movf	?_atoi,w
  1116  0173  00C5               	movwf	??_main
  1117  0174  0845               	movf	??_main,w
  1118  0175  00CD               	movwf	_b
  1119                           
  1120                           ;main.c: 68: b = b - a + 1;
  1121  0176  034E               	decf	_a,w
  1122  0177  3AFF               	xorlw	255
  1123  0178  074D               	addwf	_b,w
  1124  0179  3E01               	addlw	1
  1125  017A  00C5               	movwf	??_main
  1126  017B  0845               	movf	??_main,w
  1127  017C  00CD               	movwf	_b
  1128                           
  1129                           ;main.c: 69: for (i = 0; i < b; i++) {
  1130  017D  01D0               	clrf	_i
  1131  017E                     l1816:	
  1132  017E  084D               	movf	_b,w
  1133  017F  0250               	subwf	_i,w
  1134  0180  1803               	btfsc	3,0
  1135  0181  29FE               	goto	l1818
  1136                           
  1137                           ;main.c: 70: array[i] = array[i + a];
  1138  0182  084E               	movf	_a,w
  1139  0183  0750               	addwf	_i,w
  1140  0184  3EA0               	addlw	(low (_array| 0))& (0+255)
  1141  0185  0084               	movwf	4
  1142  0186  1383               	bcf	3,7	;select IRP bank1
  1143  0187  0800               	movf	0,w
  1144  0188  00C5               	movwf	??_main
  1145  0189  0850               	movf	_i,w
  1146  018A  3EA0               	addlw	(low (_array| 0))& (0+255)
  1147  018B  0084               	movwf	4
  1148  018C  0845               	movf	??_main,w
  1149  018D  0080               	movwf	0
  1150                           
  1151                           ;main.c: 71: arrayv[i] = arrayv[i + a];
  1152  018E  084E               	movf	_a,w
  1153  018F  0750               	addwf	_i,w
  1154  0190  00C5               	movwf	??_main
  1155  0191  0745               	addwf	??_main,w
  1156  0192  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  1157  0193  0084               	movwf	4
  1158  0194  1783               	bsf	3,7	;select IRP bank3
  1159  0195  0800               	movf	0,w
  1160  0196  00C6               	movwf	??_main+1
  1161  0197  0A84               	incf	4,f
  1162  0198  0800               	movf	0,w
  1163  0199  00C7               	movwf	??_main+2
  1164  019A  0850               	movf	_i,w
  1165  019B  00C8               	movwf	??_main+3
  1166  019C  0748               	addwf	??_main+3,w
  1167  019D  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  1168  019E  0084               	movwf	4
  1169  019F  0846               	movf	??_main+1,w
  1170  01A0  0080               	movwf	0
  1171  01A1  0A84               	incf	4,f
  1172  01A2  0847               	movf	??_main+2,w
  1173  01A3  0080               	movwf	0
  1174                           
  1175                           ;main.c: 72: printf("[%2u] %5u-%u,\t\t", i, 0xFFFF - arrayv[i], array[i]);
  1176  01A4  30EB               	movlw	low (STR_5| (0+32768))
  1177  01A5  00AB               	movwf	printf@f
  1178  01A6  3085               	movlw	high (STR_5| (0+32768))
  1179  01A7  00AC               	movwf	printf@f+1
  1180  01A8  0850               	movf	_i,w
  1181  01A9  00C5               	movwf	??_main
  1182  01AA  01C6               	clrf	??_main+1
  1183  01AB  0845               	movf	??_main,w
  1184  01AC  00AD               	movwf	?_printf+2
  1185  01AD  0846               	movf	??_main+1,w
  1186  01AE  00AE               	movwf	?_printf+3
  1187  01AF  0850               	movf	_i,w
  1188  01B0  00C7               	movwf	??_main+2
  1189  01B1  0747               	addwf	??_main+2,w
  1190  01B2  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  1191  01B3  0084               	movwf	4
  1192  01B4  0800               	movf	0,w
  1193  01B5  00C8               	movwf	??_main+3
  1194  01B6  0A84               	incf	4,f
  1195  01B7  0800               	movf	0,w
  1196  01B8  00C9               	movwf	??_main+4
  1197  01B9  09C8               	comf	??_main+3,f
  1198  01BA  09C9               	comf	??_main+4,f
  1199  01BB  0AC8               	incf	??_main+3,f
  1200  01BC  1903               	skipnz
  1201  01BD  0AC9               	incf	??_main+4,f
  1202  01BE  0848               	movf	??_main+3,w
  1203  01BF  3EFF               	addlw	255
  1204  01C0  00AF               	movwf	?_printf+4
  1205  01C1  0849               	movf	??_main+4,w
  1206  01C2  1803               	skipnc
  1207  01C3  3E01               	addlw	1
  1208  01C4  3EFF               	addlw	255
  1209  01C5  00B0               	movwf	?_printf+5
  1210  01C6  0850               	movf	_i,w
  1211  01C7  3EA0               	addlw	(low (_array| 0))& (0+255)
  1212  01C8  0084               	movwf	4
  1213  01C9  1383               	bcf	3,7	;select IRP bank1
  1214  01CA  0800               	movf	0,w
  1215  01CB  00CA               	movwf	??_main+5
  1216  01CC  01CB               	clrf	??_main+6
  1217  01CD  084A               	movf	??_main+5,w
  1218  01CE  00B1               	movwf	?_printf+6
  1219  01CF  084B               	movf	??_main+6,w
  1220  01D0  00B2               	movwf	?_printf+7
  1221  01D1  120A  118A  2261  120A  118A  	fcall	_printf
  1222                           
  1223                           ;main.c: 73: printf("%5u-%u,\n\r", arrayv[i], array[i]);
  1224  01D6  30FB               	movlw	low (STR_6| (0+32768))
  1225  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1226  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1227  01D9  00AB               	movwf	printf@f
  1228  01DA  3085               	movlw	high (STR_6| (0+32768))
  1229  01DB  00AC               	movwf	printf@f+1
  1230  01DC  0850               	movf	_i,w
  1231  01DD  00C5               	movwf	??_main
  1232  01DE  0745               	addwf	??_main,w
  1233  01DF  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  1234  01E0  0084               	movwf	4
  1235  01E1  1783               	bsf	3,7	;select IRP bank3
  1236  01E2  0800               	movf	0,w
  1237  01E3  00AD               	movwf	?_printf+2
  1238  01E4  0A84               	incf	4,f
  1239  01E5  0800               	movf	0,w
  1240  01E6  00AE               	movwf	?_printf+3
  1241  01E7  0850               	movf	_i,w
  1242  01E8  3EA0               	addlw	(low (_array| 0))& (0+255)
  1243  01E9  0084               	movwf	4
  1244  01EA  1383               	bcf	3,7	;select IRP bank1
  1245  01EB  0800               	movf	0,w
  1246  01EC  00C6               	movwf	??_main+1
  1247  01ED  01C7               	clrf	??_main+2
  1248  01EE  0846               	movf	??_main+1,w
  1249  01EF  00AF               	movwf	?_printf+4
  1250  01F0  0847               	movf	??_main+2,w
  1251  01F1  00B0               	movwf	?_printf+5
  1252  01F2  120A  118A  2261  120A  118A  	fcall	_printf
  1253  01F7  3001               	movlw	1
  1254  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1255  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1256  01FA  00C5               	movwf	??_main
  1257  01FB  0845               	movf	??_main,w
  1258  01FC  07D0               	addwf	_i,f
  1259  01FD  297E               	goto	l1816
  1260  01FE                     l1818:	
  1261                           
  1262                           ;main.c: 74: }
  1263                           ;main.c: 75: }
  1264                           ;main.c: 76: if (c == 'i') {
  1265  01FE  3069               	movlw	105
  1266  01FF  0651               	xorwf	_c,w
  1267  0200  1D03               	btfss	3,2
  1268  0201  2A35               	goto	l1836
  1269                           
  1270                           ;main.c: 77: printf("Digitare quante volte riprodurre la sequenza: ");
  1271  0202  301C               	movlw	low (STR_12| (0+32768))
  1272  0203  00AB               	movwf	printf@f
  1273  0204  3085               	movlw	high (STR_12| (0+32768))
  1274  0205  00AC               	movwf	printf@f+1
  1275  0206  120A  118A  2261  120A  118A  	fcall	_printf
  1276                           
  1277                           ;main.c: 78: read_line(number, 10);
  1278  020B  300A               	movlw	10
  1279  020C  00F6               	movwf	read_line@max_len
  1280  020D  3000               	movlw	0
  1281  020E  00F7               	movwf	read_line@max_len+1
  1282  020F  3052               	movlw	(low (_number| 0))& (0+255)
  1283  0210  120A  118A  2622  120A  118A  	fcall	_read_line
  1284                           
  1285                           ;main.c: 79: cycles = atoi(number);
  1286  0215  3052               	movlw	(low (_number| 0))& (0+255)
  1287  0216  120A  118A  2722  120A  118A  	fcall	_atoi
  1288  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1289  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1290  021D  0824               	movf	?_atoi,w
  1291  021E  00C5               	movwf	??_main
  1292  021F  0845               	movf	??_main,w
  1293  0220  00CC               	movwf	_cycles
  1294                           
  1295                           ;main.c: 80: printf("Riproducendo...\n\r");
  1296  0221  30C8               	movlw	low (STR_13| (0+32768))
  1297  0222  00AB               	movwf	printf@f
  1298  0223  3085               	movlw	high (STR_13| (0+32768))
  1299  0224  00AC               	movwf	printf@f+1
  1300  0225  120A  118A  2261  120A  118A  	fcall	_printf
  1301                           
  1302                           ;main.c: 81: i = 0;
  1303  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1304  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1305  022C  01D0               	clrf	_i
  1306                           
  1307                           ;main.c: 82: e = 0;
  1308  022D  01CF               	clrf	_e
  1309                           
  1310                           ;main.c: 83: PIR1bits.TMR1IF = 0;
  1311  022E  100C               	bcf	12,0	;volatile
  1312                           
  1313                           ;main.c: 84: T1CONbits.TMR1ON = 1;
  1314  022F  1410               	bsf	16,0	;volatile
  1315  0230                     l1834:	
  1316                           ;main.c: 85: while (e < cycles);
  1317                           
  1318  0230  084C               	movf	_cycles,w
  1319  0231  024F               	subwf	_e,w
  1320  0232  1C03               	skipc
  1321  0233  2A30               	goto	l1834
  1322                           
  1323                           ;main.c: 86: T1CONbits.TMR1ON = 0;
  1324  0234  1010               	bcf	16,0	;volatile
  1325  0235                     l1836:	
  1326                           
  1327                           ;main.c: 87: }
  1328                           ;main.c: 88: if (c == 't') {
  1329  0235  3074               	movlw	116
  1330  0236  0651               	xorwf	_c,w
  1331  0237  1D03               	btfss	3,2
  1332  0238  2842               	goto	l1738
  1333                           
  1334                           ;main.c: 89: printf("Resettare per uscire.\n\r");
  1335  0239  30B0               	movlw	low (STR_14| (0+32768))
  1336  023A  00AB               	movwf	printf@f
  1337  023B  3085               	movlw	high (STR_14| (0+32768))
  1338  023C  00AC               	movwf	printf@f+1
  1339  023D  120A  118A  2261  120A  118A  	fcall	_printf
  1340  0242                     l1840:	
  1341                           ;main.c: 90: while (1) {
  1342                           
  1343                           
  1344                           ;main.c: 91: PORTAbits.RA1 = !PORTBbits.RB4;
  1345  0242  1003               	clrc
  1346  0243  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0244  1303               	bcf	3,6	;RP1=0, select bank0
  1348  0245  1E06               	btfss	6,4	;volatile
  1349  0246  1403               	setc
  1350  0247  1C03               	btfss	3,0
  1351  0248  2A4D               	goto	u2030
  1352  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1353  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1354  024B  1485               	bsf	5,1	;volatile
  1355  024C  2A50               	goto	l1842
  1356  024D                     u2030:	
  1357  024D  1283               	bcf	3,5	;RP0=0, select bank0
  1358  024E  1303               	bcf	3,6	;RP1=0, select bank0
  1359  024F  1085               	bcf	5,1	;volatile
  1360  0250                     l1842:	
  1361                           
  1362                           ;main.c: 92: PORTAbits.RA2 = !PORTBbits.RB4;
  1363  0250  1003               	clrc
  1364  0251  1E06               	btfss	6,4	;volatile
  1365  0252  1403               	setc
  1366  0253  1C03               	btfss	3,0
  1367  0254  2A59               	goto	u2050
  1368  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0257  1505               	bsf	5,2	;volatile
  1371  0258  2A42               	goto	l1840
  1372  0259                     u2050:	
  1373  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1374  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1375  025B  1105               	bcf	5,2	;volatile
  1376  025C  2A42               	goto	l1840
  1377  025D                     l1844:	
  1378                           ;main.c: 93: }
  1379                           ;main.c: 94: }
  1380                           ;main.c: 95: } else printf("ERRORE: digitare 'e', 'i' o 't'.\n\r");
  1381                           
  1382  025D  3074               	movlw	low (STR_15| (0+32768))
  1383  025E  00AB               	movwf	printf@f
  1384  025F  3085               	movlw	high (STR_15| (0+32768))
  1385  0260  283C               	goto	L1
  1386  0261                     __end_of_main:	
  1387                           
  1388                           	psect	text1
  1389  0414                     __ptext1:	
  1390 ;; *************** function _setup_peripheals *****************
  1391 ;; Defined at:
  1392 ;;		line 99 in file "main.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, status,2, status,0
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1406 ;;      Params:         0       0       0       0       0
  1407 ;;      Locals:         0       0       0       0       0
  1408 ;;      Temps:          0       0       0       0       0
  1409 ;;      Totals:         0       0       0       0       0
  1410 ;;Total ram usage:        0 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    1
  1413 ;; This function calls:
  1414 ;;		Nothing
  1415 ;; This function is called by:
  1416 ;;		_main
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           
  1421                           ;psect for function _setup_peripheals
  1422  0414                     _setup_peripheals:	
  1423                           
  1424                           ;main.c: 101: PORTA = 0;
  1425                           
  1426                           ;incstack = 0
  1427                           ; Regs used in _setup_peripheals: [wreg+status,2+status,0]
  1428  0414  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0415  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0416  0185               	clrf	5	;volatile
  1431                           
  1432                           ;main.c: 102: ADCON1bits.PCFG = 0x06;
  1433  0417  1683               	bsf	3,5	;RP0=1, select bank1
  1434  0418  1303               	bcf	3,6	;RP1=0, select bank1
  1435  0419  081F               	movf	31,w	;volatile
  1436  041A  39F0               	andlw	-16
  1437  041B  3806               	iorlw	6
  1438  041C  009F               	movwf	31	;volatile
  1439                           
  1440                           ;main.c: 104: TRISA = 0;
  1441  041D  0185               	clrf	5	;volatile
  1442                           
  1443                           ;main.c: 105: TRISB = 0x10;
  1444  041E  3010               	movlw	16
  1445  041F  0086               	movwf	6	;volatile
  1446                           
  1447                           ;main.c: 106: TRISC = 0;
  1448  0420  0187               	clrf	7	;volatile
  1449                           
  1450                           ;main.c: 109: INTCONbits.GIE = 1;
  1451  0421  178B               	bsf	11,7	;volatile
  1452                           
  1453                           ;main.c: 110: INTCONbits.PEIE = 1;
  1454  0422  170B               	bsf	11,6	;volatile
  1455                           
  1456                           ;main.c: 113: INTCONbits.RBIF = 0;
  1457  0423  100B               	bcf	11,0	;volatile
  1458                           
  1459                           ;main.c: 114: INTCONbits.RBIE = 0;
  1460  0424  118B               	bcf	11,3	;volatile
  1461                           
  1462                           ;main.c: 117: TRISCbits.TRISC6 = 0;
  1463  0425  1307               	bcf	7,6	;volatile
  1464                           
  1465                           ;main.c: 118: TRISCbits.TRISC7 = 1;
  1466  0426  1787               	bsf	7,7	;volatile
  1467                           
  1468                           ;main.c: 119: PORTCbits.RC6 = 1;
  1469  0427  1283               	bcf	3,5	;RP0=0, select bank0
  1470  0428  1303               	bcf	3,6	;RP1=0, select bank0
  1471  0429  1707               	bsf	7,6	;volatile
  1472                           
  1473                           ;main.c: 121: TXSTAbits.SYNC = 0;
  1474  042A  1683               	bsf	3,5	;RP0=1, select bank1
  1475  042B  1303               	bcf	3,6	;RP1=0, select bank1
  1476  042C  1218               	bcf	24,4	;volatile
  1477                           
  1478                           ;main.c: 122: TXSTAbits.TX9 = 0;
  1479  042D  1318               	bcf	24,6	;volatile
  1480                           
  1481                           ;main.c: 123: TXSTAbits.TXEN = 1;
  1482  042E  1698               	bsf	24,5	;volatile
  1483                           
  1484                           ;main.c: 124: RCSTAbits.RC9 = 0;
  1485  042F  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0430  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0431  1318               	bcf	24,6	;volatile
  1488                           
  1489                           ;main.c: 126: TXSTAbits.BRGH = 0;
  1490  0432  1683               	bsf	3,5	;RP0=1, select bank1
  1491  0433  1303               	bcf	3,6	;RP1=0, select bank1
  1492  0434  1118               	bcf	24,2	;volatile
  1493                           
  1494                           ;main.c: 127: SPBRG = 15;
  1495  0435  300F               	movlw	15
  1496  0436  0099               	movwf	25	;volatile
  1497                           
  1498                           ;main.c: 129: RCSTAbits.CREN = 1;
  1499  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1501  0439  1618               	bsf	24,4	;volatile
  1502                           
  1503                           ;main.c: 130: RCSTAbits.SPEN = 1;
  1504  043A  1798               	bsf	24,7	;volatile
  1505                           
  1506                           ;main.c: 132: PIE1bits.TXIE = 0;
  1507  043B  1683               	bsf	3,5	;RP0=1, select bank1
  1508  043C  1303               	bcf	3,6	;RP1=0, select bank1
  1509  043D  120C               	bcf	12,4	;volatile
  1510                           
  1511                           ;main.c: 133: PIE1bits.RCIE = 0;
  1512  043E  128C               	bcf	12,5	;volatile
  1513                           
  1514                           ;main.c: 136: T1CONbits.T1CKPS = 0b11;
  1515  043F  3030               	movlw	48
  1516  0440  1283               	bcf	3,5	;RP0=0, select bank0
  1517  0441  1303               	bcf	3,6	;RP1=0, select bank0
  1518  0442  0490               	iorwf	16,f	;volatile
  1519                           
  1520                           ;main.c: 137: T1CONbits.T1OSCEN = 1;
  1521  0443  1590               	bsf	16,3	;volatile
  1522                           
  1523                           ;main.c: 138: T1CONbits.TMR1CS = 0;
  1524  0444  1090               	bcf	16,1	;volatile
  1525                           
  1526                           ;main.c: 139: T1CONbits.TMR1ON = 0;
  1527  0445  1010               	bcf	16,0	;volatile
  1528                           
  1529                           ;main.c: 140: TMR1 = 0;
  1530  0446  018E               	clrf	14	;volatile
  1531  0447  018F               	clrf	15	;volatile
  1532                           
  1533                           ;main.c: 142: PIE1bits.TMR1IE = 1;
  1534  0448  1683               	bsf	3,5	;RP0=1, select bank1
  1535  0449  1303               	bcf	3,6	;RP1=0, select bank1
  1536  044A  140C               	bsf	12,0	;volatile
  1537                           
  1538                           ;main.c: 143: PIR1bits.TMR1IF = 0;
  1539  044B  1283               	bcf	3,5	;RP0=0, select bank0
  1540  044C  1303               	bcf	3,6	;RP1=0, select bank0
  1541  044D  100C               	bcf	12,0	;volatile
  1542  044E  0008               	return
  1543  044F                     __end_of_setup_peripheals:	
  1544                           
  1545                           	psect	text2
  1546  0622                     __ptext2:	
  1547 ;; *************** function _read_line *****************
  1548 ;; Defined at:
  1549 ;;		line 164 in file "main.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  s               1    wreg     PTR unsigned char 
  1552 ;;		 -> number(10), 
  1553 ;;  max_len         2    6[COMMON] int 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  s               1    2[BANK0 ] PTR unsigned char 
  1556 ;;		 -> number(10), 
  1557 ;;  c               1    5[BANK0 ] unsigned char 
  1558 ;;  i               2    3[BANK0 ] int 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1568 ;;      Params:         2       0       0       0       0
  1569 ;;      Locals:         0       4       0       0       0
  1570 ;;      Temps:          0       2       0       0       0
  1571 ;;      Totals:         2       6       0       0       0
  1572 ;;Total ram usage:        8 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    2
  1575 ;; This function calls:
  1576 ;;		_putch
  1577 ;;		_read_char
  1578 ;; This function is called by:
  1579 ;;		_main
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           
  1584                           ;psect for function _read_line
  1585  0622                     _read_line:	
  1586                           
  1587                           ;incstack = 0
  1588                           ; Regs used in _read_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1589                           ;read_line@s stored from wreg
  1590  0622  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0623  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0624  00A2               	movwf	read_line@s
  1593                           
  1594                           ;main.c: 165: int i = 0;
  1595  0625  01A3               	clrf	read_line@i
  1596  0626  01A4               	clrf	read_line@i+1
  1597  0627  2E3C               	goto	l1342
  1598  0628                     l1346:	
  1599                           
  1600                           ;main.c: 169: putch(c);
  1601  0628  0825               	movf	read_line@c,w
  1602  0629  120A  118A  2491  120A  118A  	fcall	_putch
  1603                           
  1604                           ;main.c: 170: putch(10);
  1605  062E  300A               	movlw	10
  1606  062F  120A  118A  2491   	fcall	_putch
  1607                           
  1608                           ;main.c: 171: s[i] = 0;
  1609  0632  1283               	bcf	3,5	;RP0=0, select bank0
  1610  0633  1303               	bcf	3,6	;RP1=0, select bank0
  1611  0634  0823               	movf	read_line@i,w
  1612  0635  0722               	addwf	read_line@s,w
  1613  0636  00A0               	movwf	??_read_line
  1614  0637  0820               	movf	??_read_line,w
  1615  0638  0084               	movwf	4
  1616  0639  1383               	bcf	3,7	;select IRP bank0
  1617  063A  0180               	clrf	0
  1618                           
  1619                           ;main.c: 172: return;
  1620  063B  0008               	return
  1621  063C                     l1342:	
  1622                           ;main.c: 166: for (;;) {
  1623                           
  1624                           ;main.c: 173: } else if (c == 127 || c == 8) {
  1625                           
  1626                           
  1627                           ;main.c: 167: char c = read_char();
  1628  063C  120A  118A  27F4  120A  118A  	fcall	_read_char
  1629  0641  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0642  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0643  00A0               	movwf	??_read_line
  1632  0644  0820               	movf	??_read_line,w
  1633  0645  00A5               	movwf	read_line@c
  1634                           
  1635                           ;main.c: 168: if (c == 13) {
  1636  0646  300D               	movlw	13
  1637  0647  0625               	xorwf	read_line@c,w
  1638  0648  1903               	btfsc	3,2
  1639  0649  2E28               	goto	l1346
  1640  064A  307F               	movlw	127
  1641  064B  0625               	xorwf	read_line@c,w
  1642  064C  1903               	btfsc	3,2
  1643  064D  2E52               	goto	l1358
  1644  064E  3008               	movlw	8
  1645  064F  0625               	xorwf	read_line@c,w
  1646  0650  1D03               	btfss	3,2
  1647  0651  2E7B               	goto	l1364
  1648  0652                     l1358:	
  1649                           
  1650                           ;main.c: 174: if (i > 0) {
  1651  0652  0824               	movf	read_line@i+1,w
  1652  0653  3A80               	xorlw	128
  1653  0654  00FF               	movwf	127
  1654  0655  3080               	movlw	128
  1655  0656  027F               	subwf	127,w
  1656  0657  1D03               	skipz
  1657  0658  2E5B               	goto	u1155
  1658  0659  3001               	movlw	1
  1659  065A  0223               	subwf	read_line@i,w
  1660  065B                     u1155:	
  1661  065B  1C03               	skipc
  1662  065C  2E3C               	goto	l1342
  1663                           
  1664                           ;main.c: 175: putch(c);
  1665  065D  1283               	bcf	3,5	;RP0=0, select bank0
  1666  065E  1303               	bcf	3,6	;RP1=0, select bank0
  1667  065F  0825               	movf	read_line@c,w
  1668  0660  120A  118A  2491  120A  118A  	fcall	_putch
  1669                           
  1670                           ;main.c: 176: putch(' ');
  1671  0665  3020               	movlw	32
  1672  0666  120A  118A  2491  120A  118A  	fcall	_putch
  1673                           
  1674                           ;main.c: 177: putch(c);
  1675  066B  1283               	bcf	3,5	;RP0=0, select bank0
  1676  066C  1303               	bcf	3,6	;RP1=0, select bank0
  1677  066D  0825               	movf	read_line@c,w
  1678  066E  120A  118A  2491  120A  118A  	fcall	_putch
  1679                           
  1680                           ;main.c: 178: --i;
  1681  0673  30FF               	movlw	255
  1682  0674  1283               	bcf	3,5	;RP0=0, select bank0
  1683  0675  1303               	bcf	3,6	;RP1=0, select bank0
  1684  0676  07A3               	addwf	read_line@i,f
  1685  0677  1803               	skipnc
  1686  0678  0AA4               	incf	read_line@i+1,f
  1687  0679  30FF               	movlw	255
  1688  067A  2EA4               	goto	L2
  1689  067B                     l1364:	
  1690                           ;main.c: 179: }
  1691                           ;main.c: 180: } else if (c >= 32) {
  1692                           
  1693  067B  3020               	movlw	32
  1694  067C  0225               	subwf	read_line@c,w
  1695  067D  1C03               	skipc
  1696  067E  2E3C               	goto	l1342
  1697                           
  1698                           ;main.c: 181: if (i < max_len) {
  1699  067F  0824               	movf	read_line@i+1,w
  1700  0680  3A80               	xorlw	128
  1701  0681  00A0               	movwf	??_read_line
  1702  0682  0877               	movf	read_line@max_len+1,w
  1703  0683  3A80               	xorlw	128
  1704  0684  0220               	subwf	??_read_line,w
  1705  0685  1D03               	skipz
  1706  0686  2E89               	goto	u1175
  1707  0687  0876               	movf	read_line@max_len,w
  1708  0688  0223               	subwf	read_line@i,w
  1709  0689                     u1175:	
  1710  0689  1803               	skipnc
  1711  068A  2E3C               	goto	l1342
  1712                           
  1713                           ;main.c: 182: putch(c);
  1714  068B  1283               	bcf	3,5	;RP0=0, select bank0
  1715  068C  1303               	bcf	3,6	;RP1=0, select bank0
  1716  068D  0825               	movf	read_line@c,w
  1717  068E  120A  118A  2491  120A  118A  	fcall	_putch
  1718                           
  1719                           ;main.c: 183: s[i] = c;
  1720  0693  1283               	bcf	3,5	;RP0=0, select bank0
  1721  0694  1303               	bcf	3,6	;RP1=0, select bank0
  1722  0695  0825               	movf	read_line@c,w
  1723  0696  00A0               	movwf	??_read_line
  1724  0697  0823               	movf	read_line@i,w
  1725  0698  0722               	addwf	read_line@s,w
  1726  0699  00A1               	movwf	??_read_line+1
  1727  069A  0821               	movf	??_read_line+1,w
  1728  069B  0084               	movwf	4
  1729  069C  0820               	movf	??_read_line,w
  1730  069D  1383               	bcf	3,7	;select IRP bank0
  1731  069E  0080               	movwf	0
  1732                           
  1733                           ;main.c: 184: ++i;
  1734  069F  3001               	movlw	1
  1735  06A0  07A3               	addwf	read_line@i,f
  1736  06A1  1803               	skipnc
  1737  06A2  0AA4               	incf	read_line@i+1,f
  1738  06A3  3000               	movlw	0
  1739  06A4                     L2:	
  1740  06A4  07A4               	addwf	read_line@i+1,f
  1741                           
  1742                           ;main.c: 185: }
  1743                           ;main.c: 186: }
  1744                           ;main.c: 187: }
  1745  06A5  2E3C               	goto	l1342
  1746  06A6                     __end_of_read_line:	
  1747                           
  1748                           	psect	text3
  1749  07F4                     __ptext3:	
  1750 ;; *************** function _read_char *****************
  1751 ;; Defined at:
  1752 ;;		line 153 in file "main.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      unsigned char 
  1759 ;; Registers used:
  1760 ;;		wreg
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1766 ;;      Params:         0       0       0       0       0
  1767 ;;      Locals:         0       0       0       0       0
  1768 ;;      Temps:          0       0       0       0       0
  1769 ;;      Totals:         0       0       0       0       0
  1770 ;;Total ram usage:        0 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    1
  1773 ;; This function calls:
  1774 ;;		Nothing
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;;		_read_line
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function _read_char
  1783  07F4                     _read_char:	
  1784  07F4                     l109:	
  1785                           ;main.c: 154: while (PIR1bits.RCIF == 0) {
  1786                           
  1787                           ;incstack = 0
  1788                           ; Regs used in _read_char: [wreg]
  1789                           
  1790  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  1791  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  1792  07F6  1A8C               	btfsc	12,5	;volatile
  1793  07F7  2FFE               	goto	l1114
  1794                           
  1795                           ;main.c: 155: if (RCSTAbits.OERR == 1) {
  1796  07F8  1C98               	btfss	24,1	;volatile
  1797  07F9  2FF4               	goto	l109
  1798                           
  1799                           ;main.c: 156: RCSTAbits.OERR = 0;
  1800  07FA  1098               	bcf	24,1	;volatile
  1801                           
  1802                           ;main.c: 157: RCSTAbits.CREN = 0;
  1803  07FB  1218               	bcf	24,4	;volatile
  1804                           
  1805                           ;main.c: 158: RCSTAbits.CREN = 1;
  1806  07FC  1618               	bsf	24,4	;volatile
  1807  07FD  2FF4               	goto	l109
  1808  07FE                     l1114:	
  1809                           
  1810                           ;main.c: 159: }
  1811                           ;main.c: 160: }
  1812                           ;main.c: 161: return RCREG;
  1813  07FE  081A               	movf	26,w	;volatile
  1814  07FF  0008               	return
  1815  0800                     __end_of_read_char:	
  1816                           
  1817                           	psect	text4
  1818  0261                     __ptext4:	
  1819 ;; *************** function _printf *****************
  1820 ;; Defined at:
  1821 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  1824 ;;		 -> STR_15(35), STR_14(24), STR_13(18), STR_12(47), 
  1825 ;;		 -> STR_11(10), STR_10(16), STR_9(7), STR_8(9), 
  1826 ;;		 -> STR_7(25), STR_6(10), STR_5(16), STR_4(17), 
  1827 ;;		 -> STR_3(5), STR_2(41), STR_1(8), 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  tmpval          4    0        struct .
  1830 ;;  width           2   30[BANK0 ] int 
  1831 ;;  len             2   28[BANK0 ] unsigned int 
  1832 ;;  val             2   24[BANK0 ] unsigned int 
  1833 ;;  c               1   32[BANK0 ] char 
  1834 ;;  ap              1   27[BANK0 ] PTR void [1]
  1835 ;;		 -> ?_printf(2), 
  1836 ;;  prec            1   26[BANK0 ] char 
  1837 ;;  cp              1   23[BANK0 ] PTR const unsigned char 
  1838 ;;		 -> printf@c(1), 
  1839 ;;  flag            1   22[BANK0 ] unsigned char 
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  2   11[BANK0 ] int 
  1842 ;; Registers used:
  1843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1849 ;;      Params:         0       8       0       0       0
  1850 ;;      Locals:         0      11       0       0       0
  1851 ;;      Temps:          0       3       0       0       0
  1852 ;;      Totals:         0      22       0       0       0
  1853 ;;Total ram usage:       22 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    2
  1856 ;; This function calls:
  1857 ;;		___lwdiv
  1858 ;;		___lwmod
  1859 ;;		___wmul
  1860 ;;		_isdigit
  1861 ;;		_putch
  1862 ;; This function is called by:
  1863 ;;		_main
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           
  1868                           ;psect for function _printf
  1869  0261                     _printf:	
  1870                           
  1871                           ;doprnt.c: 466: va_list ap;
  1872                           ;doprnt.c: 499: signed char c;
  1873                           ;doprnt.c: 501: int width;
  1874                           ;doprnt.c: 506: signed char prec;
  1875                           ;doprnt.c: 508: unsigned char flag;
  1876                           ;doprnt.c: 523: union {
  1877                           ;doprnt.c: 524: unsigned long vd;
  1878                           ;doprnt.c: 525: double integ;
  1879                           ;doprnt.c: 526: } tmpval;
  1880                           ;doprnt.c: 528: unsigned int val;
  1881                           ;doprnt.c: 529: unsigned len;
  1882                           ;doprnt.c: 530: const char * cp;
  1883                           ;doprnt.c: 533: *ap = __va_start();
  1884                           
  1885                           ;incstack = 0
  1886                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1887  0261  302D               	movlw	(low ((?_printf| 0+2)))& (0+255)
  1888  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1890  0264  00B3               	movwf	??_printf
  1891  0265  0833               	movf	??_printf,w
  1892  0266  00BB               	movwf	printf@ap
  1893  0267                     l1698:	
  1894                           ;doprnt.c: 536: while(c = *f++) {
  1895                           
  1896  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1897  0268  1303               	bcf	3,6	;RP1=0, select bank0
  1898  0269  082C               	movf	printf@f+1,w
  1899  026A  00B4               	movwf	??_printf+1
  1900  026B  082B               	movf	printf@f,w
  1901  026C  00B3               	movwf	??_printf
  1902  026D  0AAB               	incf	printf@f,f
  1903  026E  1903               	skipnz
  1904  026F  0AAC               	incf	printf@f+1,f
  1905  0270  0834               	movf	??_printf+1,w
  1906  0271  00FF               	movwf	127
  1907  0272  0833               	movf	??_printf,w
  1908  0273  0084               	movwf	4
  1909  0274  120A  118A  2500  120A  118A  	fcall	stringtab
  1910  0279  00B5               	movwf	??_printf+2
  1911  027A  0835               	movf	??_printf+2,w
  1912  027B  00C0               	movwf	printf@c
  1913  027C  0840               	movf	printf@c,w
  1914  027D  1903               	btfsc	3,2
  1915  027E  0008               	return
  1916                           
  1917                           ;doprnt.c: 538: if(c != '%')
  1918  027F  3025               	movlw	37
  1919  0280  0640               	xorwf	printf@c,w
  1920  0281  1903               	btfsc	3,2
  1921  0282  2A8A               	goto	l1618
  1922                           
  1923                           ;doprnt.c: 540: {
  1924                           ;doprnt.c: 541: (putch(c) );
  1925  0283  0840               	movf	printf@c,w
  1926  0284  120A  118A  2491  120A  118A  	fcall	_putch
  1927                           
  1928                           ;doprnt.c: 542: continue;
  1929  0289  2A67               	goto	l1698
  1930  028A                     l1618:	
  1931                           
  1932                           ;doprnt.c: 543: }
  1933                           ;doprnt.c: 546: width = 0;
  1934  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1935  028B  1303               	bcf	3,6	;RP1=0, select bank0
  1936  028C  01BE               	clrf	printf@width
  1937  028D  01BF               	clrf	printf@width+1
  1938                           
  1939                           ;doprnt.c: 548: flag = 0;
  1940  028E  01B6               	clrf	printf@flag
  1941                           
  1942                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1943  028F  082C               	movf	printf@f+1,w
  1944  0290  00FF               	movwf	127
  1945  0291  082B               	movf	printf@f,w
  1946  0292  0084               	movwf	4
  1947  0293  120A  118A  2500  120A  118A  	fcall	stringtab
  1948  0298  120A  118A  2483  120A  118A  	fcall	_isdigit
  1949  029D  1C03               	btfss	3,0
  1950  029E  2B3E               	goto	l1660
  1951                           
  1952                           ;doprnt.c: 598: width = 0;
  1953  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1954  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1955  02A1  01BE               	clrf	printf@width
  1956  02A2  01BF               	clrf	printf@width+1
  1957  02A3                     l1624:	
  1958                           ;doprnt.c: 599: do {
  1959                           
  1960                           
  1961                           ;doprnt.c: 600: width *= 10;
  1962  02A3  300A               	movlw	10
  1963  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  1964  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  1965  02A6  00A0               	movwf	___wmul@multiplier
  1966  02A7  3000               	movlw	0
  1967  02A8  00A1               	movwf	___wmul@multiplier+1
  1968  02A9  083F               	movf	printf@width+1,w
  1969  02AA  00A3               	movwf	___wmul@multiplicand+1
  1970  02AB  083E               	movf	printf@width,w
  1971  02AC  00A2               	movwf	___wmul@multiplicand
  1972  02AD  120A  118A  27D1  120A  118A  	fcall	___wmul
  1973  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1974  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1975  02B4  0821               	movf	?___wmul+1,w
  1976  02B5  00BF               	movwf	printf@width+1
  1977  02B6  0820               	movf	?___wmul,w
  1978  02B7  00BE               	movwf	printf@width
  1979                           
  1980                           ;doprnt.c: 601: width += *f++ - '0';
  1981  02B8  082C               	movf	printf@f+1,w
  1982  02B9  00FF               	movwf	127
  1983  02BA  082B               	movf	printf@f,w
  1984  02BB  0084               	movwf	4
  1985  02BC  120A  118A  2500  120A  118A  	fcall	stringtab
  1986  02C1  3ED0               	addlw	208
  1987  02C2  00B3               	movwf	??_printf
  1988  02C3  30FF               	movlw	255
  1989  02C4  1803               	skipnc
  1990  02C5  3000               	movlw	0
  1991  02C6  00B4               	movwf	??_printf+1
  1992  02C7  0833               	movf	??_printf,w
  1993  02C8  07BE               	addwf	printf@width,f
  1994  02C9  1803               	skipnc
  1995  02CA  0ABF               	incf	printf@width+1,f
  1996  02CB  0834               	movf	??_printf+1,w
  1997  02CC  07BF               	addwf	printf@width+1,f
  1998  02CD  3001               	movlw	1
  1999  02CE  07AB               	addwf	printf@f,f
  2000  02CF  1803               	skipnc
  2001  02D0  0AAC               	incf	printf@f+1,f
  2002                           
  2003                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2004  02D1  082C               	movf	printf@f+1,w
  2005  02D2  00FF               	movwf	127
  2006  02D3  082B               	movf	printf@f,w
  2007  02D4  0084               	movwf	4
  2008  02D5  120A  118A  2500  120A  118A  	fcall	stringtab
  2009  02DA  120A  118A  2483  120A  118A  	fcall	_isdigit
  2010  02DF  1C03               	btfss	3,0
  2011  02E0  2B3E               	goto	l1660
  2012  02E1  2AA3               	goto	l1624
  2013  02E2                     l1632:	
  2014                           ;doprnt.c: 750: dostring:
  2015                           
  2016                           ;doprnt.c: 638: goto alldone;
  2017                           
  2018                           ;doprnt.c: 637: case 0:
  2019                           
  2020                           ;doprnt.c: 608: }
  2021                           ;doprnt.c: 635: switch(c = *f++) {
  2022                           
  2023                           
  2024                           ;doprnt.c: 757: if(width > len)
  2025  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2026  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2027  02E4  083F               	movf	printf@width+1,w
  2028  02E5  023D               	subwf	printf@len+1,w
  2029  02E6  1D03               	skipz
  2030  02E7  2AEA               	goto	u1715
  2031  02E8  083E               	movf	printf@width,w
  2032  02E9  023C               	subwf	printf@len,w
  2033  02EA                     u1715:	
  2034  02EA  1803               	skipnc
  2035  02EB  2AF3               	goto	l1636
  2036                           
  2037                           ;doprnt.c: 758: width -= len;
  2038  02EC  083C               	movf	printf@len,w
  2039  02ED  02BE               	subwf	printf@width,f
  2040  02EE  083D               	movf	printf@len+1,w
  2041  02EF  1C03               	skipc
  2042  02F0  03BF               	decf	printf@width+1,f
  2043  02F1  02BF               	subwf	printf@width+1,f
  2044  02F2  2AF5               	goto	l1640
  2045  02F3                     l1636:	
  2046                           
  2047                           ;doprnt.c: 759: else
  2048                           ;doprnt.c: 760: width = 0;
  2049  02F3  01BE               	clrf	printf@width
  2050  02F4  01BF               	clrf	printf@width+1
  2051  02F5                     l1640:	
  2052                           ;doprnt.c: 764: while(width--)
  2053                           
  2054  02F5  30FF               	movlw	255
  2055  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  2056  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  2057  02F8  07BE               	addwf	printf@width,f
  2058  02F9  1803               	skipnc
  2059  02FA  0ABF               	incf	printf@width+1,f
  2060  02FB  30FF               	movlw	255
  2061  02FC  07BF               	addwf	printf@width+1,f
  2062  02FD  0A3E               	incf	printf@width,w
  2063  02FE  1903               	btfsc	3,2
  2064  02FF  0A3F               	incf	printf@width+1,w
  2065  0300  1903               	btfsc	3,2
  2066  0301  2B18               	goto	l1646
  2067                           
  2068                           ;doprnt.c: 765: (putch(' ') );
  2069  0302  3020               	movlw	32
  2070  0303  120A  118A  2491  120A  118A  	fcall	_putch
  2071  0308  2AF5               	goto	l1640
  2072  0309                     l1642:	
  2073                           ;doprnt.c: 767: while(len--)
  2074                           
  2075                           
  2076                           ;doprnt.c: 768: (putch(*cp++) );
  2077  0309  0837               	movf	printf@cp,w
  2078  030A  0084               	movwf	4
  2079  030B  1383               	bcf	3,7	;select IRP bank0
  2080  030C  0800               	movf	0,w
  2081  030D  120A  118A  2491  120A  118A  	fcall	_putch
  2082  0312  3001               	movlw	1
  2083  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2084  0314  1303               	bcf	3,6	;RP1=0, select bank0
  2085  0315  00B3               	movwf	??_printf
  2086  0316  0833               	movf	??_printf,w
  2087  0317  07B7               	addwf	printf@cp,f
  2088  0318                     l1646:	
  2089  0318  3001               	movlw	1
  2090  0319  02BC               	subwf	printf@len,f
  2091  031A  3000               	movlw	0
  2092  031B  1C03               	skipc
  2093  031C  03BD               	decf	printf@len+1,f
  2094  031D  02BD               	subwf	printf@len+1,f
  2095  031E  0A3C               	incf	printf@len,w
  2096  031F  1D03               	skipz
  2097  0320  2B09               	goto	l1642
  2098  0321  0A3D               	incf	printf@len+1,w
  2099  0322  1903               	btfsc	3,2
  2100  0323  2A67               	goto	l1698
  2101  0324  2B09               	goto	l1642
  2102  0325                     l1648:	
  2103                           ;doprnt.c: 784: case 'c':
  2104                           
  2105                           ;doprnt.c: 774: continue;
  2106                           
  2107                           
  2108                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2109  0325  083B               	movf	printf@ap,w
  2110  0326  0084               	movwf	4
  2111  0327  1383               	bcf	3,7	;select IRP bank0
  2112  0328  0800               	movf	0,w
  2113  0329  00B3               	movwf	??_printf
  2114  032A  0833               	movf	??_printf,w
  2115  032B  00C0               	movwf	printf@c
  2116  032C  3002               	movlw	2
  2117  032D  00B3               	movwf	??_printf
  2118  032E  0833               	movf	??_printf,w
  2119  032F  07BB               	addwf	printf@ap,f
  2120  0330                     l1652:	
  2121                           ;doprnt.c: 802: default:
  2122                           
  2123                           
  2124                           ;doprnt.c: 805: cp = (char *)&c;
  2125  0330  3040               	movlw	(low (printf@c| 0))& (0+255)
  2126  0331  00B3               	movwf	??_printf
  2127  0332  0833               	movf	??_printf,w
  2128  0333  00B7               	movwf	printf@cp
  2129                           
  2130                           ;doprnt.c: 806: len = 1;
  2131  0334  3001               	movlw	1
  2132  0335  00BC               	movwf	printf@len
  2133  0336  3000               	movlw	0
  2134  0337  00BD               	movwf	printf@len+1
  2135                           
  2136                           ;doprnt.c: 807: goto dostring;
  2137  0338  2AE2               	goto	l1632
  2138  0339                     l1656:	
  2139                           ;doprnt.c: 817: case 'u':
  2140                           
  2141                           
  2142                           ;doprnt.c: 818: flag |= 0xC0;
  2143  0339  30C0               	movlw	192
  2144  033A  00B3               	movwf	??_printf
  2145  033B  0833               	movf	??_printf,w
  2146  033C  04B6               	iorwf	printf@flag,f
  2147                           
  2148                           ;doprnt.c: 822: }
  2149                           
  2150                           ;doprnt.c: 819: break;
  2151  033D  2B5B               	goto	l1662
  2152  033E                     l1660:	
  2153  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2154  033F  1303               	bcf	3,6	;RP1=0, select bank0
  2155  0340  082C               	movf	printf@f+1,w
  2156  0341  00B4               	movwf	??_printf+1
  2157  0342  082B               	movf	printf@f,w
  2158  0343  00B3               	movwf	??_printf
  2159  0344  0AAB               	incf	printf@f,f
  2160  0345  1903               	skipnz
  2161  0346  0AAC               	incf	printf@f+1,f
  2162  0347  0834               	movf	??_printf+1,w
  2163  0348  00FF               	movwf	127
  2164  0349  0833               	movf	??_printf,w
  2165  034A  0084               	movwf	4
  2166  034B  120A  118A  2500  120A  118A  	fcall	stringtab
  2167  0350  00C0               	movwf	printf@c
  2168                           
  2169                           ; Switch size 1, requested type "space"
  2170                           ; Number of cases is 3, Range of values is 0 to 117
  2171                           ; switch strategies available:
  2172                           ; Name         Instructions Cycles
  2173                           ; simple_byte           10     6 (average)
  2174                           ; jumptable            260     6 (fixed)
  2175                           ;	Chosen strategy is simple_byte
  2176  0351  3A00               	xorlw	0	; case 0
  2177  0352  1903               	skipnz
  2178  0353  2C13               	goto	l186
  2179  0354  3A63               	xorlw	99	; case 99
  2180  0355  1903               	skipnz
  2181  0356  2B25               	goto	l1648
  2182  0357  3A16               	xorlw	22	; case 117
  2183  0358  1903               	skipnz
  2184  0359  2B39               	goto	l1656
  2185  035A  2B30               	goto	l1652
  2186  035B                     l1662:	
  2187                           
  2188                           ;doprnt.c: 1273: {
  2189                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2190  035B  083B               	movf	printf@ap,w
  2191  035C  0084               	movwf	4
  2192  035D  1383               	bcf	3,7	;select IRP bank0
  2193  035E  0800               	movf	0,w
  2194  035F  00B8               	movwf	printf@val
  2195  0360  0A84               	incf	4,f
  2196  0361  0800               	movf	0,w
  2197  0362  00B9               	movwf	printf@val+1
  2198  0363  3002               	movlw	2
  2199  0364  00B3               	movwf	??_printf
  2200  0365  0833               	movf	??_printf,w
  2201  0366  07BB               	addwf	printf@ap,f
  2202                           
  2203                           ;doprnt.c: 1287: }
  2204                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2205  0367  01C0               	clrf	printf@c
  2206  0368  0AC0               	incf	printf@c,f
  2207  0369  3005               	movlw	5
  2208  036A  0640               	xorwf	printf@c,w
  2209  036B  1903               	btfsc	3,2
  2210  036C  2B92               	goto	l1678
  2211  036D                     l1672:	
  2212                           
  2213                           ;doprnt.c: 1306: if(val < dpowers[c])
  2214  036D  0840               	movf	printf@c,w
  2215  036E  00B3               	movwf	??_printf
  2216  036F  0733               	addwf	??_printf,w
  2217  0370  3E12               	addlw	low (_dpowers| (0+32768))
  2218  0371  0084               	movwf	4
  2219  0372  3085               	movlw	high (_dpowers| (0+32768))
  2220  0373  1803               	skipnc
  2221  0374  3E01               	addlw	1
  2222  0375  00FF               	movwf	127
  2223  0376  120A  118A  2500  120A  118A  	fcall	stringtab
  2224  037B  00B4               	movwf	??_printf+1
  2225  037C  120A  118A  2500  120A  118A  	fcall	stringtab
  2226  0381  00B5               	movwf	??_printf+2
  2227  0382  0835               	movf	??_printf+2,w
  2228  0383  0239               	subwf	printf@val+1,w
  2229  0384  1D03               	skipz
  2230  0385  2B88               	goto	u1755
  2231  0386  0834               	movf	??_printf+1,w
  2232  0387  0238               	subwf	printf@val,w
  2233  0388                     u1755:	
  2234  0388  1C03               	btfss	3,0
  2235  0389  2B92               	goto	l1678
  2236                           
  2237                           ;doprnt.c: 1307: break;
  2238  038A  3001               	movlw	1
  2239  038B  00B3               	movwf	??_printf
  2240  038C  0833               	movf	??_printf,w
  2241  038D  07C0               	addwf	printf@c,f
  2242  038E  3005               	movlw	5
  2243  038F  0640               	xorwf	printf@c,w
  2244  0390  1D03               	btfss	3,2
  2245  0391  2B6D               	goto	l1672
  2246  0392                     l1678:	
  2247                           
  2248                           ;doprnt.c: 1381: if(width > c)
  2249  0392  0840               	movf	printf@c,w
  2250  0393  00B3               	movwf	??_printf
  2251  0394  01B4               	clrf	??_printf+1
  2252  0395  1BB3               	btfsc	??_printf,7
  2253  0396  03B4               	decf	??_printf+1,f
  2254  0397  0834               	movf	??_printf+1,w
  2255  0398  3A80               	xorlw	128
  2256  0399  00B5               	movwf	??_printf+2
  2257  039A  083F               	movf	printf@width+1,w
  2258  039B  3A80               	xorlw	128
  2259  039C  0235               	subwf	??_printf+2,w
  2260  039D  1D03               	skipz
  2261  039E  2BA1               	goto	u1775
  2262  039F  083E               	movf	printf@width,w
  2263  03A0  0233               	subwf	??_printf,w
  2264  03A1                     u1775:	
  2265  03A1  1803               	skipnc
  2266  03A2  2BB1               	goto	l1682
  2267                           
  2268                           ;doprnt.c: 1382: width -= c;
  2269  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2270  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2271  03A5  0840               	movf	printf@c,w
  2272  03A6  00B3               	movwf	??_printf
  2273  03A7  01B4               	clrf	??_printf+1
  2274  03A8  1BB3               	btfsc	??_printf,7
  2275  03A9  03B4               	decf	??_printf+1,f
  2276  03AA  0833               	movf	??_printf,w
  2277  03AB  02BE               	subwf	printf@width,f
  2278  03AC  0834               	movf	??_printf+1,w
  2279  03AD  1C03               	skipc
  2280  03AE  03BF               	decf	printf@width+1,f
  2281  03AF  02BF               	subwf	printf@width+1,f
  2282  03B0  2BB5               	goto	l1684
  2283  03B1                     l1682:	
  2284                           
  2285                           ;doprnt.c: 1383: else
  2286                           ;doprnt.c: 1384: width = 0;
  2287  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2288  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2289  03B3  01BE               	clrf	printf@width
  2290  03B4  01BF               	clrf	printf@width+1
  2291  03B5                     l1684:	
  2292                           
  2293                           ;doprnt.c: 1422: {
  2294                           ;doprnt.c: 1424: if(width
  2295                           ;doprnt.c: 1428: )
  2296  03B5  083E               	movf	printf@width,w
  2297  03B6  043F               	iorwf	printf@width+1,w
  2298  03B7  1903               	btfsc	3,2
  2299  03B8  2BCB               	goto	l1690
  2300  03B9                     l1686:	
  2301                           ;doprnt.c: 1429: do
  2302                           
  2303                           
  2304                           ;doprnt.c: 1430: (putch(' ') );
  2305  03B9  3020               	movlw	32
  2306  03BA  120A  118A  2491  120A  118A  	fcall	_putch
  2307                           
  2308                           ;doprnt.c: 1431: while(--width);
  2309  03BF  30FF               	movlw	255
  2310  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2311  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2312  03C2  07BE               	addwf	printf@width,f
  2313  03C3  1803               	skipnc
  2314  03C4  0ABF               	incf	printf@width+1,f
  2315  03C5  30FF               	movlw	255
  2316  03C6  07BF               	addwf	printf@width+1,f
  2317  03C7  083E               	movf	printf@width,w
  2318  03C8  043F               	iorwf	printf@width+1,w
  2319  03C9  1D03               	btfss	3,2
  2320  03CA  2BB9               	goto	l1686
  2321  03CB                     l1690:	
  2322                           
  2323                           ;doprnt.c: 1469: }
  2324                           ;doprnt.c: 1472: prec = c;
  2325  03CB  0840               	movf	printf@c,w
  2326  03CC  00B3               	movwf	??_printf
  2327  03CD  0833               	movf	??_printf,w
  2328  03CE  00BA               	movwf	printf@prec
  2329  03CF                     l1696:	
  2330                           ;doprnt.c: 1474: while(prec--) {
  2331                           
  2332  03CF  30FF               	movlw	255
  2333  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2334  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2335  03D2  00B3               	movwf	??_printf
  2336  03D3  0833               	movf	??_printf,w
  2337  03D4  07BA               	addwf	printf@prec,f
  2338  03D5  0A3A               	incf	printf@prec,w
  2339  03D6  1903               	btfsc	3,2
  2340  03D7  2A67               	goto	l1698
  2341                           
  2342                           ;doprnt.c: 1478: {
  2343                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2344  03D8  300A               	movlw	10
  2345  03D9  00A7               	movwf	___lwmod@divisor
  2346  03DA  3000               	movlw	0
  2347  03DB  00A8               	movwf	___lwmod@divisor+1
  2348  03DC  083A               	movf	printf@prec,w
  2349  03DD  00B3               	movwf	??_printf
  2350  03DE  0733               	addwf	??_printf,w
  2351  03DF  3E12               	addlw	low (_dpowers| (0+32768))
  2352  03E0  0084               	movwf	4
  2353  03E1  3085               	movlw	high (_dpowers| (0+32768))
  2354  03E2  1803               	skipnc
  2355  03E3  3E01               	addlw	1
  2356  03E4  00FF               	movwf	127
  2357  03E5  120A  118A  2500  120A  118A  	fcall	stringtab
  2358  03EA  00A0               	movwf	___lwdiv@divisor
  2359  03EB  120A  118A  2500  120A  118A  	fcall	stringtab
  2360  03F0  00A1               	movwf	___lwdiv@divisor+1
  2361  03F1  0839               	movf	printf@val+1,w
  2362  03F2  00A3               	movwf	___lwdiv@dividend+1
  2363  03F3  0838               	movf	printf@val,w
  2364  03F4  00A2               	movwf	___lwdiv@dividend
  2365  03F5  120A  118A  2793  120A  118A  	fcall	___lwdiv
  2366  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2367  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2368  03FC  0821               	movf	?___lwdiv+1,w
  2369  03FD  00AA               	movwf	___lwmod@dividend+1
  2370  03FE  0820               	movf	?___lwdiv,w
  2371  03FF  00A9               	movwf	___lwmod@dividend
  2372  0400  120A  118A  244F  120A  118A  	fcall	___lwmod
  2373  0405  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0406  1303               	bcf	3,6	;RP1=0, select bank0
  2375  0407  0827               	movf	?___lwmod,w
  2376  0408  3E30               	addlw	48
  2377  0409  00B4               	movwf	??_printf+1
  2378  040A  0834               	movf	??_printf+1,w
  2379  040B  00C0               	movwf	printf@c
  2380                           
  2381                           ;doprnt.c: 1523: }
  2382                           ;doprnt.c: 1524: (putch(c) );
  2383  040C  0840               	movf	printf@c,w
  2384  040D  120A  118A  2491  120A  118A  	fcall	_putch
  2385  0412  2BCF               	goto	l1696
  2386  0413                     l186:	
  2387                           ;doprnt.c: 1540: return 0;
  2388                           ;	Return value of _printf is never used
  2389                           
  2390                           ;doprnt.c: 1525: }
  2391                           ;doprnt.c: 1533: }
  2392                           ;doprnt.c: 1535: alldone:
  2393                           
  2394  0413  0008               	return
  2395  0414                     __end_of_printf:	
  2396                           
  2397                           	psect	text5
  2398  0491                     __ptext5:	
  2399 ;; *************** function _putch *****************
  2400 ;; Defined at:
  2401 ;;		line 146 in file "main.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  c               1    wreg     unsigned char 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  c               1    5[COMMON] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2415 ;;      Params:         0       0       0       0       0
  2416 ;;      Locals:         1       0       0       0       0
  2417 ;;      Temps:          0       0       0       0       0
  2418 ;;      Totals:         1       0       0       0       0
  2419 ;;Total ram usage:        1 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    1
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_read_line
  2426 ;;		_printf
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _putch
  2432  0491                     _putch:	
  2433                           
  2434                           ;incstack = 0
  2435                           ; Regs used in _putch: [wreg]
  2436                           ;putch@c stored from wreg
  2437  0491  00F5               	movwf	putch@c
  2438  0492                     l103:	
  2439                           ;main.c: 148: while (TXSTAbits.TRMT == 0) {
  2440                           
  2441  0492  1683               	bsf	3,5	;RP0=1, select bank1
  2442  0493  1303               	bcf	3,6	;RP1=0, select bank1
  2443  0494  1C98               	btfss	24,1	;volatile
  2444  0495  2C92               	goto	l103
  2445                           
  2446                           ;main.c: 149: };
  2447                           ;main.c: 150: TXREG = c;
  2448  0496  0875               	movf	putch@c,w
  2449  0497  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0498  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0499  0099               	movwf	25	;volatile
  2452  049A  0008               	return
  2453  049B                     __end_of_putch:	
  2454                           
  2455                           	psect	text6
  2456  044F                     __ptext6:	
  2457 ;; *************** function ___lwmod *****************
  2458 ;; Defined at:
  2459 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  divisor         2    7[BANK0 ] unsigned int 
  2462 ;;  dividend        2    9[BANK0 ] unsigned int 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  counter         1    7[COMMON] unsigned char 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  2    7[BANK0 ] unsigned int 
  2467 ;; Registers used:
  2468 ;;		wreg, status,2, status,0
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2474 ;;      Params:         0       4       0       0       0
  2475 ;;      Locals:         1       0       0       0       0
  2476 ;;      Temps:          1       0       0       0       0
  2477 ;;      Totals:         2       4       0       0       0
  2478 ;;Total ram usage:        6 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    1
  2481 ;; This function calls:
  2482 ;;		Nothing
  2483 ;; This function is called by:
  2484 ;;		_printf
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function ___lwmod
  2490  044F                     ___lwmod:	
  2491                           
  2492                           ;incstack = 0
  2493                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2494  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2495  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2496  0451  0827               	movf	___lwmod@divisor,w
  2497  0452  0428               	iorwf	___lwmod@divisor+1,w
  2498  0453  1903               	btfsc	3,2
  2499  0454  2C7E               	goto	l1608
  2500  0455  01F7               	clrf	___lwmod@counter
  2501  0456  0AF7               	incf	___lwmod@counter,f
  2502  0457                     l1598:	
  2503  0457  1BA8               	btfsc	___lwmod@divisor+1,7
  2504  0458  2C65               	goto	l1600
  2505  0459  3001               	movlw	1
  2506  045A                     u1635:	
  2507  045A  1003               	clrc
  2508  045B  0DA7               	rlf	___lwmod@divisor,f
  2509  045C  0DA8               	rlf	___lwmod@divisor+1,f
  2510  045D  3EFF               	addlw	-1
  2511  045E  1D03               	skipz
  2512  045F  2C5A               	goto	u1635
  2513  0460  3001               	movlw	1
  2514  0461  00F6               	movwf	??___lwmod
  2515  0462  0876               	movf	??___lwmod,w
  2516  0463  07F7               	addwf	___lwmod@counter,f
  2517  0464  2C57               	goto	l1598
  2518  0465                     l1600:	
  2519  0465  0828               	movf	___lwmod@divisor+1,w
  2520  0466  022A               	subwf	___lwmod@dividend+1,w
  2521  0467  1D03               	skipz
  2522  0468  2C6B               	goto	u1655
  2523  0469  0827               	movf	___lwmod@divisor,w
  2524  046A  0229               	subwf	___lwmod@dividend,w
  2525  046B                     u1655:	
  2526  046B  1C03               	skipc
  2527  046C  2C73               	goto	l1604
  2528  046D  0827               	movf	___lwmod@divisor,w
  2529  046E  02A9               	subwf	___lwmod@dividend,f
  2530  046F  0828               	movf	___lwmod@divisor+1,w
  2531  0470  1C03               	skipc
  2532  0471  03AA               	decf	___lwmod@dividend+1,f
  2533  0472  02AA               	subwf	___lwmod@dividend+1,f
  2534  0473                     l1604:	
  2535  0473  3001               	movlw	1
  2536  0474                     u1665:	
  2537  0474  1003               	clrc
  2538  0475  0CA8               	rrf	___lwmod@divisor+1,f
  2539  0476  0CA7               	rrf	___lwmod@divisor,f
  2540  0477  3EFF               	addlw	-1
  2541  0478  1D03               	skipz
  2542  0479  2C74               	goto	u1665
  2543  047A  3001               	movlw	1
  2544  047B  02F7               	subwf	___lwmod@counter,f
  2545  047C  1D03               	btfss	3,2
  2546  047D  2C65               	goto	l1600
  2547  047E                     l1608:	
  2548  047E  082A               	movf	___lwmod@dividend+1,w
  2549  047F  00A8               	movwf	?___lwmod+1
  2550  0480  0829               	movf	___lwmod@dividend,w
  2551  0481  00A7               	movwf	?___lwmod
  2552  0482  0008               	return
  2553  0483                     __end_of___lwmod:	
  2554                           
  2555                           	psect	text7
  2556  0793                     __ptext7:	
  2557 ;; *************** function ___lwdiv *****************
  2558 ;; Defined at:
  2559 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;  divisor         2    0[BANK0 ] unsigned int 
  2562 ;;  dividend        2    2[BANK0 ] unsigned int 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  quotient        2    5[BANK0 ] unsigned int 
  2565 ;;  counter         1    4[BANK0 ] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  2    0[BANK0 ] unsigned int 
  2568 ;; Registers used:
  2569 ;;		wreg, status,2, status,0
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2575 ;;      Params:         0       4       0       0       0
  2576 ;;      Locals:         0       3       0       0       0
  2577 ;;      Temps:          1       0       0       0       0
  2578 ;;      Totals:         1       7       0       0       0
  2579 ;;Total ram usage:        8 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    1
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		_printf
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           
  2590                           ;psect for function ___lwdiv
  2591  0793                     ___lwdiv:	
  2592                           
  2593                           ;incstack = 0
  2594                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2595  0793  1283               	bcf	3,5	;RP0=0, select bank0
  2596  0794  1303               	bcf	3,6	;RP1=0, select bank0
  2597  0795  01A5               	clrf	___lwdiv@quotient
  2598  0796  01A6               	clrf	___lwdiv@quotient+1
  2599  0797  0820               	movf	___lwdiv@divisor,w
  2600  0798  0421               	iorwf	___lwdiv@divisor+1,w
  2601  0799  1903               	btfsc	3,2
  2602  079A  2FCC               	goto	l1586
  2603  079B  01A4               	clrf	___lwdiv@counter
  2604  079C  0AA4               	incf	___lwdiv@counter,f
  2605  079D                     l1574:	
  2606  079D  1BA1               	btfsc	___lwdiv@divisor+1,7
  2607  079E  2FAB               	goto	l1576
  2608  079F  3001               	movlw	1
  2609  07A0                     u1565:	
  2610  07A0  1003               	clrc
  2611  07A1  0DA0               	rlf	___lwdiv@divisor,f
  2612  07A2  0DA1               	rlf	___lwdiv@divisor+1,f
  2613  07A3  3EFF               	addlw	-1
  2614  07A4  1D03               	skipz
  2615  07A5  2FA0               	goto	u1565
  2616  07A6  3001               	movlw	1
  2617  07A7  00F5               	movwf	??___lwdiv
  2618  07A8  0875               	movf	??___lwdiv,w
  2619  07A9  07A4               	addwf	___lwdiv@counter,f
  2620  07AA  2F9D               	goto	l1574
  2621  07AB                     l1576:	
  2622  07AB  3001               	movlw	1
  2623  07AC                     u1585:	
  2624  07AC  1003               	clrc
  2625  07AD  0DA5               	rlf	___lwdiv@quotient,f
  2626  07AE  0DA6               	rlf	___lwdiv@quotient+1,f
  2627  07AF  3EFF               	addlw	-1
  2628  07B0  1D03               	skipz
  2629  07B1  2FAC               	goto	u1585
  2630  07B2  0821               	movf	___lwdiv@divisor+1,w
  2631  07B3  0223               	subwf	___lwdiv@dividend+1,w
  2632  07B4  1D03               	skipz
  2633  07B5  2FB8               	goto	u1595
  2634  07B6  0820               	movf	___lwdiv@divisor,w
  2635  07B7  0222               	subwf	___lwdiv@dividend,w
  2636  07B8                     u1595:	
  2637  07B8  1C03               	skipc
  2638  07B9  2FC1               	goto	l1582
  2639  07BA  0820               	movf	___lwdiv@divisor,w
  2640  07BB  02A2               	subwf	___lwdiv@dividend,f
  2641  07BC  0821               	movf	___lwdiv@divisor+1,w
  2642  07BD  1C03               	skipc
  2643  07BE  03A3               	decf	___lwdiv@dividend+1,f
  2644  07BF  02A3               	subwf	___lwdiv@dividend+1,f
  2645  07C0  1425               	bsf	___lwdiv@quotient,0
  2646  07C1                     l1582:	
  2647  07C1  3001               	movlw	1
  2648  07C2                     u1605:	
  2649  07C2  1003               	clrc
  2650  07C3  0CA1               	rrf	___lwdiv@divisor+1,f
  2651  07C4  0CA0               	rrf	___lwdiv@divisor,f
  2652  07C5  3EFF               	addlw	-1
  2653  07C6  1D03               	skipz
  2654  07C7  2FC2               	goto	u1605
  2655  07C8  3001               	movlw	1
  2656  07C9  02A4               	subwf	___lwdiv@counter,f
  2657  07CA  1D03               	btfss	3,2
  2658  07CB  2FAB               	goto	l1576
  2659  07CC                     l1586:	
  2660  07CC  0826               	movf	___lwdiv@quotient+1,w
  2661  07CD  00A1               	movwf	?___lwdiv+1
  2662  07CE  0825               	movf	___lwdiv@quotient,w
  2663  07CF  00A0               	movwf	?___lwdiv
  2664  07D0  0008               	return
  2665  07D1                     __end_of___lwdiv:	
  2666                           
  2667                           	psect	text8
  2668  0722                     __ptext8:	
  2669 ;; *************** function _atoi *****************
  2670 ;; Defined at:
  2671 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  s               1    wreg     PTR const unsigned char 
  2674 ;;		 -> number(10), 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  s               1   11[BANK0 ] PTR const unsigned char 
  2677 ;;		 -> number(10), 
  2678 ;;  a               2    9[BANK0 ] int 
  2679 ;;  sign            1    8[BANK0 ] unsigned char 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  2    4[BANK0 ] int 
  2682 ;; Registers used:
  2683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2689 ;;      Params:         0       2       0       0       0
  2690 ;;      Locals:         0       4       0       0       0
  2691 ;;      Temps:          0       2       0       0       0
  2692 ;;      Totals:         0       8       0       0       0
  2693 ;;Total ram usage:        8 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    2
  2696 ;; This function calls:
  2697 ;;		___wmul
  2698 ;;		_isdigit
  2699 ;; This function is called by:
  2700 ;;		_main
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _atoi
  2706  0722                     _atoi:	
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2710                           ;atoi@s stored from wreg
  2711  0722  1283               	bcf	3,5	;RP0=0, select bank0
  2712  0723  1303               	bcf	3,6	;RP1=0, select bank0
  2713  0724  00AB               	movwf	atoi@s
  2714  0725                     l1704:	
  2715  0725  082B               	movf	atoi@s,w
  2716  0726  0084               	movwf	4
  2717  0727  3020               	movlw	32
  2718  0728  1383               	bcf	3,7	;select IRP bank0
  2719  0729  0600               	xorwf	0,w
  2720  072A  1D03               	btfss	3,2
  2721  072B  2F31               	goto	l1706
  2722  072C                     l1702:	
  2723  072C  3001               	movlw	1
  2724  072D  00A6               	movwf	??_atoi
  2725  072E  0826               	movf	??_atoi,w
  2726  072F  07AB               	addwf	atoi@s,f
  2727  0730  2F25               	goto	l1704
  2728  0731                     l1706:	
  2729  0731  082B               	movf	atoi@s,w
  2730  0732  0084               	movwf	4
  2731  0733  3009               	movlw	9
  2732  0734  0600               	xorwf	0,w
  2733  0735  1903               	btfsc	3,2
  2734  0736  2F2C               	goto	l1702
  2735  0737  01A9               	clrf	atoi@a
  2736  0738  01AA               	clrf	atoi@a+1
  2737  0739  01A8               	clrf	atoi@sign
  2738  073A  082B               	movf	atoi@s,w
  2739  073B  0084               	movwf	4
  2740  073C  302D               	movlw	45
  2741  073D  0600               	xorwf	0,w
  2742  073E  1D03               	btfss	3,2
  2743  073F  2F45               	goto	l1714
  2744  0740  3001               	movlw	1
  2745  0741  00A6               	movwf	??_atoi
  2746  0742  0826               	movf	??_atoi,w
  2747  0743  07A8               	addwf	atoi@sign,f
  2748  0744  2F4B               	goto	l1720
  2749  0745                     l1714:	
  2750  0745  082B               	movf	atoi@s,w
  2751  0746  0084               	movwf	4
  2752  0747  302B               	movlw	43
  2753  0748  0600               	xorwf	0,w
  2754  0749  1D03               	btfss	3,2
  2755  074A  2F4F               	goto	l1722
  2756  074B                     l1720:	
  2757  074B  3001               	movlw	1
  2758  074C  00A6               	movwf	??_atoi
  2759  074D  0826               	movf	??_atoi,w
  2760  074E  07AB               	addwf	atoi@s,f
  2761  074F                     l1722:	
  2762  074F  082B               	movf	atoi@s,w
  2763  0750  0084               	movwf	4
  2764  0751  0800               	movf	0,w
  2765  0752  120A  118A  2483  120A  118A  	fcall	_isdigit
  2766  0757  1C03               	btfss	3,0
  2767  0758  2F7D               	goto	l1724
  2768  0759  1283               	bcf	3,5	;RP0=0, select bank0
  2769  075A  1303               	bcf	3,6	;RP1=0, select bank0
  2770  075B  082A               	movf	atoi@a+1,w
  2771  075C  00A1               	movwf	___wmul@multiplier+1
  2772  075D  0829               	movf	atoi@a,w
  2773  075E  00A0               	movwf	___wmul@multiplier
  2774  075F  300A               	movlw	10
  2775  0760  00A2               	movwf	___wmul@multiplicand
  2776  0761  3000               	movlw	0
  2777  0762  00A3               	movwf	___wmul@multiplicand+1
  2778  0763  120A  118A  27D1  120A  118A  	fcall	___wmul
  2779  0768  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0769  1303               	bcf	3,6	;RP1=0, select bank0
  2781  076A  082B               	movf	atoi@s,w
  2782  076B  0084               	movwf	4
  2783  076C  1383               	bcf	3,7	;select IRP bank0
  2784  076D  0800               	movf	0,w
  2785  076E  0720               	addwf	?___wmul,w
  2786  076F  00A6               	movwf	??_atoi
  2787  0770  0821               	movf	?___wmul+1,w
  2788  0771  1803               	skipnc
  2789  0772  0A21               	incf	?___wmul+1,w
  2790  0773  00A7               	movwf	??_atoi+1
  2791  0774  0826               	movf	??_atoi,w
  2792  0775  3ED0               	addlw	208
  2793  0776  00A9               	movwf	atoi@a
  2794  0777  0827               	movf	??_atoi+1,w
  2795  0778  1803               	skipnc
  2796  0779  3E01               	addlw	1
  2797  077A  3EFF               	addlw	255
  2798  077B  00AA               	movwf	atoi@a+1
  2799  077C  2F4B               	goto	l1720
  2800  077D                     l1724:	
  2801  077D  1283               	bcf	3,5	;RP0=0, select bank0
  2802  077E  1303               	bcf	3,6	;RP1=0, select bank0
  2803  077F  0828               	movf	atoi@sign,w
  2804  0780  1903               	btfsc	3,2
  2805  0781  2F8E               	goto	l1730
  2806  0782  0929               	comf	atoi@a,w
  2807  0783  00A6               	movwf	??_atoi
  2808  0784  092A               	comf	atoi@a+1,w
  2809  0785  00A7               	movwf	??_atoi+1
  2810  0786  0AA6               	incf	??_atoi,f
  2811  0787  1903               	skipnz
  2812  0788  0AA7               	incf	??_atoi+1,f
  2813  0789  0826               	movf	??_atoi,w
  2814  078A  00A4               	movwf	?_atoi
  2815  078B  0827               	movf	??_atoi+1,w
  2816  078C  00A5               	movwf	?_atoi+1
  2817  078D  0008               	return
  2818  078E                     l1730:	
  2819  078E  082A               	movf	atoi@a+1,w
  2820  078F  00A5               	movwf	?_atoi+1
  2821  0790  0829               	movf	atoi@a,w
  2822  0791  00A4               	movwf	?_atoi
  2823  0792  0008               	return
  2824  0793                     __end_of_atoi:	
  2825                           
  2826                           	psect	text9
  2827  0483                     __ptext9:	
  2828 ;; *************** function _isdigit *****************
  2829 ;; Defined at:
  2830 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  c               1    wreg     unsigned char 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  c               1    6[COMMON] unsigned char 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;		None               void
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2844 ;;      Params:         0       0       0       0       0
  2845 ;;      Locals:         2       0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0
  2847 ;;      Totals:         2       0       0       0       0
  2848 ;;Total ram usage:        2 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_printf
  2855 ;;		_atoi
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           
  2860                           ;psect for function _isdigit
  2861  0483                     _isdigit:	
  2862                           
  2863                           ;incstack = 0
  2864                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2865                           ;isdigit@c stored from wreg
  2866  0483  00F6               	movwf	isdigit@c
  2867  0484  01F5               	clrf	_isdigit$691
  2868  0485  303A               	movlw	58
  2869  0486  0276               	subwf	isdigit@c,w
  2870  0487  1803               	skipnc
  2871  0488  2C8F               	goto	l1130
  2872  0489  3030               	movlw	48
  2873  048A  0276               	subwf	isdigit@c,w
  2874  048B  1C03               	skipc
  2875  048C  2C8F               	goto	l1130
  2876  048D  01F5               	clrf	_isdigit$691
  2877  048E  0AF5               	incf	_isdigit$691,f
  2878  048F                     l1130:	
  2879  048F  0C75               	rrf	_isdigit$691,w
  2880  0490  0008               	return
  2881  0491                     __end_of_isdigit:	
  2882                           
  2883                           	psect	text10
  2884  07D1                     __ptext10:	
  2885 ;; *************** function ___wmul *****************
  2886 ;; Defined at:
  2887 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2890 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  product         2    5[COMMON] unsigned int 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  2    0[BANK0 ] unsigned int 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2902 ;;      Params:         0       4       0       0       0
  2903 ;;      Locals:         2       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0
  2905 ;;      Totals:         2       4       0       0       0
  2906 ;;Total ram usage:        6 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    1
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_printf
  2913 ;;		_atoi
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function ___wmul
  2919  07D1                     ___wmul:	
  2920                           
  2921                           ;incstack = 0
  2922                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2923  07D1  01F5               	clrf	___wmul@product
  2924  07D2  01F6               	clrf	___wmul@product+1
  2925  07D3                     l1552:	
  2926  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  2927  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  2928  07D5  1C20               	btfss	___wmul@multiplier,0
  2929  07D6  2FDD               	goto	l270
  2930  07D7  0822               	movf	___wmul@multiplicand,w
  2931  07D8  07F5               	addwf	___wmul@product,f
  2932  07D9  1803               	skipnc
  2933  07DA  0AF6               	incf	___wmul@product+1,f
  2934  07DB  0823               	movf	___wmul@multiplicand+1,w
  2935  07DC  07F6               	addwf	___wmul@product+1,f
  2936  07DD                     l270:	
  2937  07DD  3001               	movlw	1
  2938  07DE                     u1525:	
  2939  07DE  1003               	clrc
  2940  07DF  0DA2               	rlf	___wmul@multiplicand,f
  2941  07E0  0DA3               	rlf	___wmul@multiplicand+1,f
  2942  07E1  3EFF               	addlw	-1
  2943  07E2  1D03               	skipz
  2944  07E3  2FDE               	goto	u1525
  2945  07E4  3001               	movlw	1
  2946  07E5                     u1535:	
  2947  07E5  1003               	clrc
  2948  07E6  0CA1               	rrf	___wmul@multiplier+1,f
  2949  07E7  0CA0               	rrf	___wmul@multiplier,f
  2950  07E8  3EFF               	addlw	-1
  2951  07E9  1D03               	skipz
  2952  07EA  2FE5               	goto	u1535
  2953  07EB  0820               	movf	___wmul@multiplier,w
  2954  07EC  0421               	iorwf	___wmul@multiplier+1,w
  2955  07ED  1D03               	btfss	3,2
  2956  07EE  2FD3               	goto	l1552
  2957  07EF  0876               	movf	___wmul@product+1,w
  2958  07F0  00A1               	movwf	?___wmul+1
  2959  07F1  0875               	movf	___wmul@product,w
  2960  07F2  00A0               	movwf	?___wmul
  2961  07F3  0008               	return
  2962  07F4                     __end_of___wmul:	
  2963                           
  2964                           	psect	text11
  2965  06A6                     __ptext11:	
  2966 ;; *************** function _ISR *****************
  2967 ;; Defined at:
  2968 ;;		line 190 in file "main.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      void 
  2975 ;; Registers used:
  2976 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2982 ;;      Params:         0       0       0       0       0
  2983 ;;      Locals:         0       0       0       0       0
  2984 ;;      Temps:          5       0       0       0       0
  2985 ;;      Totals:         5       0       0       0       0
  2986 ;;Total ram usage:        5 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; This function calls:
  2989 ;;		Nothing
  2990 ;; This function is called by:
  2991 ;;		Interrupt level 1
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           
  2996                           ;psect for function _ISR
  2997  06A6                     _ISR:	
  2998                           
  2999                           ;main.c: 191: if (c == 'e') {
  3000  06A6  3065               	movlw	101
  3001  06A7  0651               	xorwf	_c,w
  3002  06A8  1D03               	btfss	3,2
  3003  06A9  2EE7               	goto	i1l1538
  3004                           
  3005                           ;main.c: 192: arrayv[i] = TMR1;
  3006  06AA  0850               	movf	_i,w
  3007  06AB  00F0               	movwf	??_ISR
  3008  06AC  0770               	addwf	??_ISR,w
  3009  06AD  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  3010  06AE  0084               	movwf	4
  3011  06AF  080E               	movf	14,w	;volatile
  3012  06B0  1783               	bsf	3,7	;select IRP bank3
  3013  06B1  0080               	movwf	0
  3014  06B2  0A84               	incf	4,f
  3015  06B3  080F               	movf	15,w	;volatile
  3016  06B4  0080               	movwf	0
  3017                           
  3018                           ;main.c: 193: TMR1 = 0;
  3019  06B5  018E               	clrf	14	;volatile
  3020  06B6  018F               	clrf	15	;volatile
  3021                           
  3022                           ;main.c: 194: i++;
  3023  06B7  3001               	movlw	1
  3024  06B8  00F0               	movwf	??_ISR
  3025  06B9  0870               	movf	??_ISR,w
  3026  06BA  07D0               	addwf	_i,f
  3027                           
  3028                           ;main.c: 195: if (i < 48) array[i] = !PORTBbits.RB4;
  3029  06BB  3030               	movlw	48
  3030  06BC  0250               	subwf	_i,w
  3031  06BD  1803               	skipnc
  3032  06BE  2ECB               	goto	i1l133
  3033  06BF  0850               	movf	_i,w
  3034  06C0  3EA0               	addlw	(low (_array| 0))& (0+255)
  3035  06C1  0084               	movwf	4
  3036  06C2  1003               	clrc
  3037  06C3  1E06               	btfss	6,4	;volatile
  3038  06C4  1403               	setc
  3039  06C5  3000               	movlw	0
  3040  06C6  1803               	btfsc	3,0
  3041  06C7  3001               	movlw	1
  3042  06C8  1383               	bcf	3,7	;select IRP bank1
  3043  06C9  0080               	movwf	0
  3044  06CA  2ECD               	goto	i1l1532
  3045  06CB                     i1l133:	
  3046                           
  3047                           ;main.c: 196: else {
  3048                           ;main.c: 197: T1CONbits.TMR1ON = 0;
  3049  06CB  1010               	bcf	16,0	;volatile
  3050                           
  3051                           ;main.c: 198: INTCONbits.RBIE = 0;
  3052  06CC  118B               	bcf	11,3	;volatile
  3053  06CD                     i1l1532:	
  3054                           
  3055                           ;main.c: 199: }
  3056                           ;main.c: 200: PORTAbits.RA1 = !PORTBbits.RB4;
  3057  06CD  1003               	clrc
  3058  06CE  1E06               	btfss	6,4	;volatile
  3059  06CF  1403               	setc
  3060  06D0  1C03               	btfss	3,0
  3061  06D1  2ED6               	goto	u145_20
  3062  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  3063  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  3064  06D4  1485               	bsf	5,1	;volatile
  3065  06D5  2ED9               	goto	u146_24
  3066  06D6                     u145_20:	
  3067  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  3068  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  3069  06D8  1085               	bcf	5,1	;volatile
  3070  06D9                     u146_24:	
  3071                           
  3072                           ;main.c: 201: PORTAbits.RA2 = !PORTBbits.RB4;
  3073  06D9  1003               	clrc
  3074  06DA  1E06               	btfss	6,4	;volatile
  3075  06DB  1403               	setc
  3076  06DC  1C03               	btfss	3,0
  3077  06DD  2EE2               	goto	u147_20
  3078  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  3079  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  3080  06E0  1505               	bsf	5,2	;volatile
  3081  06E1  2EE5               	goto	i1l1534
  3082  06E2                     u147_20:	
  3083  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  3084  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  3085  06E4  1105               	bcf	5,2	;volatile
  3086  06E5                     i1l1534:	
  3087                           
  3088                           ;main.c: 202: INTCONbits.RBIF = 0;
  3089  06E5  100B               	bcf	11,0	;volatile
  3090  06E6  2F16               	goto	i1l138
  3091  06E7                     i1l1538:	
  3092                           ;main.c: 204: } else {
  3093                           
  3094                           ;main.c: 203: PIR1bits.TMR1IF = 0;
  3095                           
  3096                           
  3097                           ;main.c: 205: if (e < cycles) {
  3098  06E7  084C               	movf	_cycles,w
  3099  06E8  024F               	subwf	_e,w
  3100  06E9  1803               	skipnc
  3101  06EA  2F15               	goto	i1l136
  3102                           
  3103                           ;main.c: 206: TMR1 = arrayv[i];
  3104  06EB  0850               	movf	_i,w
  3105  06EC  00F0               	movwf	??_ISR
  3106  06ED  0770               	addwf	??_ISR,w
  3107  06EE  3E90               	addlw	(low (_arrayv| (0+256)))& (0+255)
  3108  06EF  0084               	movwf	4
  3109  06F0  1783               	bsf	3,7	;select IRP bank3
  3110  06F1  0800               	movf	0,w
  3111  06F2  008E               	movwf	14	;volatile
  3112  06F3  0A84               	incf	4,f
  3113  06F4  0800               	movf	0,w
  3114  06F5  008F               	movwf	15	;volatile
  3115                           
  3116                           ;main.c: 207: PORTAbits.RA1 = array[i];
  3117  06F6  0850               	movf	_i,w
  3118  06F7  3EA0               	addlw	(low (_array| 0))& (0+255)
  3119  06F8  0084               	movwf	4
  3120  06F9  1383               	bcf	3,7	;select IRP bank1
  3121  06FA  0C00               	rrf	0,w
  3122  06FB  1C03               	skipc
  3123  06FC  1085               	bcf	5,1	;volatile
  3124  06FD  1803               	skipnc
  3125  06FE  1485               	bsf	5,1	;volatile
  3126                           
  3127                           ;main.c: 208: PORTAbits.RA2 = array[i];
  3128  06FF  0850               	movf	_i,w
  3129  0700  3EA0               	addlw	(low (_array| 0))& (0+255)
  3130  0701  0084               	movwf	4
  3131  0702  0C00               	rrf	0,w
  3132  0703  1C03               	skipc
  3133  0704  1105               	bcf	5,2	;volatile
  3134  0705  1803               	skipnc
  3135  0706  1505               	bsf	5,2	;volatile
  3136                           
  3137                           ;main.c: 209: i++;
  3138  0707  3001               	movlw	1
  3139  0708  00F0               	movwf	??_ISR
  3140  0709  0870               	movf	??_ISR,w
  3141  070A  07D0               	addwf	_i,f
  3142                           
  3143                           ;main.c: 210: if (i >= b) {
  3144  070B  084D               	movf	_b,w
  3145  070C  0250               	subwf	_i,w
  3146  070D  1C03               	skipc
  3147  070E  2F16               	goto	i1l138
  3148                           
  3149                           ;main.c: 211: e++;
  3150  070F  3001               	movlw	1
  3151  0710  00F0               	movwf	??_ISR
  3152  0711  0870               	movf	??_ISR,w
  3153  0712  07CF               	addwf	_e,f
  3154                           
  3155                           ;main.c: 212: i = 0;
  3156  0713  01D0               	clrf	_i
  3157                           
  3158                           ;main.c: 213: }
  3159                           ;main.c: 214: } else T1CONbits.TMR1ON = 0;
  3160  0714  2F16               	goto	i1l138
  3161  0715                     i1l136:	
  3162  0715  1010               	bcf	16,0	;volatile
  3163  0716                     i1l138:	
  3164                           
  3165                           ;main.c: 215: PIR1bits.TMR1IF = 0;
  3166  0716  100C               	bcf	12,0	;volatile
  3167  0717  0874               	movf	??_ISR+4,w
  3168  0718  00FF               	movwf	127
  3169  0719  0873               	movf	??_ISR+3,w
  3170  071A  008A               	movwf	10
  3171  071B  0872               	movf	??_ISR+2,w
  3172  071C  0084               	movwf	4
  3173  071D  0E71               	swapf	(??_ISR+1)^(0+-128),w
  3174  071E  0083               	movwf	3
  3175  071F  0EFE               	swapf	126,f
  3176  0720  0E7E               	swapf	126,w
  3177  0721  0009               	retfie
  3178  0722                     __end_of_ISR:	
  3179  007E                     btemp	set	126	;btemp
  3180  007E                     wtemp0	set	126
  3181                           
  3182                           	psect	intentry
  3183  0004                     __pintentry:	
  3184                           ;incstack = 0
  3185                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0]
  3186                           
  3187  0004                     interrupt_function:	
  3188  007E                     saved_w	set	btemp
  3189  0004  00FE               	movwf	btemp
  3190  0005  0E03               	swapf	3,w
  3191  0006  00F1               	movwf	??_ISR+1
  3192  0007  0804               	movf	4,w
  3193  0008  00F2               	movwf	??_ISR+2
  3194  0009  080A               	movf	10,w
  3195  000A  00F3               	movwf	??_ISR+3
  3196  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3197  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3198  000D  087F               	movf	btemp+1,w
  3199  000E  00F4               	movwf	??_ISR+4
  3200  000F  120A  118A  2EA6   	ljmp	_ISR


Data Sizes:
    Strings     262
    Constant    10
    Data        0
    BSS         161
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80     44      60
    BANK1            80      0      48
    BANK3            96      0      96
    BANK2            96      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 10
		 -> number(BANK0[10]), 

    printf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_15(CODE[35]), STR_14(CODE[24]), STR_13(CODE[18]), STR_12(CODE[47]), 
		 -> STR_11(CODE[10]), STR_10(CODE[16]), STR_9(CODE[7]), STR_8(CODE[9]), 
		 -> STR_7(CODE[25]), STR_6(CODE[10]), STR_5(CODE[16]), STR_4(CODE[17]), 
		 -> STR_3(CODE[5]), STR_2(CODE[41]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read_line@s	PTR unsigned char  size(1) Largest target is 10
		 -> number(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_read_line
    _read_line->_putch
    _printf->___lwmod
    ___lwmod->___lwdiv
    _atoi->___wmul
    _atoi->_isdigit

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _atoi->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11     7      4    5114
                                             33 BANK0     11     7      4
                               _atoi
                             _printf
                          _read_char
                          _read_line
                   _setup_peripheals
 ---------------------------------------------------------------------------------
 (1) _setup_peripheals                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_line                                            8     6      2     660
                                              6 COMMON     2     0      2
                                              0 BANK0      6     6      0
                              _putch
                          _read_char
 ---------------------------------------------------------------------------------
 (2) _read_char                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    18      8    3509
                                             11 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     386
                                              6 COMMON     2     2      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     395
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     945
                                              4 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     444
                                              5 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atoi
     ___wmul
     _isdigit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_char
   _read_line
     _putch
     _read_char
   _setup_peripheals

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      D5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2C      3C       5       75.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      30       7       60.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      60       9      100.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      D5      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Apr 14 18:28:38 2018

                        _a 004E                          _b 004D                          _c 0051  
                        _e 004F                          _i 0050                          pc 0002  
              __CFG_CP$OFF 0000                         fsr 0004        ___wmul@multiplicand 0022  
                      l103 0492                        l109 07F4                        l270 07DD  
                      l186 0413               __CFG_CPD$OFF 0000                        _ISR 06A6  
                      _val 0078                        fsr0 0004                        indf 0000  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       ?_ISR 0070  
                     l1130 048F                       l1114 07FE                       l1342 063C  
                     l1600 0465                       l1346 0628                       l1604 0473  
                     l1364 067B                       l1702 072C                       l1358 0652  
                     l1552 07D3                       l1720 074B                       l1704 0725  
                     l1608 047E                       l1640 02F5                       l1632 02E2  
                     l1624 02A3                       l1730 078E                       l1722 074F  
                     l1714 0745                       l1706 0731                       l1642 0309  
                     l1618 028A                       l1724 077D                       l1652 0330  
                     l1636 02F3                       l1660 033E                       l1582 07C1  
                     l1574 079D                       l1662 035B                       l1646 0318  
                     l1576 07AB                       l1672 036D                       l1656 0339  
                     l1648 0325                       l1840 0242                       l1816 017E  
                     l1586 07CC                       l1690 03CB                       l1682 03B1  
                     l1842 0250                       l1834 0230                       l1818 01FE  
                     l1754 0077                       l1738 0042                       l1684 03B5  
                     l1836 0235                       l1844 025D                       l1598 0457  
                     l1686 03B9                       l1678 0392                       l1774 00A4  
                     l1696 03CF                       l1784 00BB                       l1776 00B0  
                     l1698 0267                       l1794 012D                       STR_1 060E  
                     STR_2 054B                       STR_3 061D                       STR_4 05DA  
                     STR_5 05EB                       STR_6 05FB                       STR_7 0597  
                     STR_8 0605                       STR_9 0616                       u2030 024D  
                     u2050 0259                       u1155 065B                       u1175 0689  
                     u1525 07DE                       u1605 07C2                       u1535 07E5  
                     u1635 045A                       u1715 02EA                       u1565 07A0  
                     u1655 046B                       u1920 00A1                       u1585 07AC  
                     u1665 0474                       u1595 07B8                       u1755 0388  
                     u1940 00AD                       u1775 03A1                       _TMR1 000E  
             __CFG_WRT$OFF 0000                       _atoi 0722                       _main 0032  
                     btemp 007E                       start 0012                      ??_ISR 0070  
                    ?_atoi 0024                      ?_main 0041                      STR_10 05EB  
                    STR_11 05FB                      STR_12 051C                      STR_13 05C8  
                    STR_14 05B0                      STR_15 0574              __CFG_WDTE$OFF 0000  
          __end_of___lwdiv 07D1                      i1l133 06CB                      i1l136 0715  
                    i1l138 0716            __end_of___lwmod 0483                      _RCREG 001A  
                    _SPBRG 0099                      _PORTA 0005                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TXREG 0019  
            __CFG_PWRTE$ON 0000            __end_of_dpowers 051C                      _array 00A0  
          __end_of_isdigit 0491                      atoi@a 0029                      atoi@s 002B  
                    _putch 0491             __CFG_BOREN$OFF 0000                      pclath 000A  
                    status 0003                      wtemp0 007E            __initialization 0015  
             __end_of_atoi 0793               __end_of_main 0261                     ??_atoi 0026  
                   ??_main 0045                     ?_putch 0070                     i1l1532 06CD  
                   i1l1534 06E5                     i1l1538 06E7                     u145_20 06D6  
                   u146_24 06D9                     u147_20 06E2                     ___wmul 07D1  
                ??___lwdiv 0075                  ??___lwmod 0076                     _arrayv 0190  
                   _cycles 004C                     _number 0052                     _printf 0261  
                ??_isdigit 0075                     saved_w 007E                     putch@c 0075  
__size_of_setup_peripheals 003B    __end_of__initialization 002E             __pcstackCOMMON 0070  
            __end_of_putch 049B                    ??_putch 0075                 __pbssBANK0 004C  
               __pbssBANK1 00A0                 __pbssBANK3 0190         __size_of_read_char 000C  
       __size_of_read_line 0084                 __pmaintext 0032                    ?___wmul 0020  
               __pintentry 0004                    ?_printf 002B                 __stringtab 0500  
          __size_of___wmul 0023                    ___lwdiv 0793                    ___lwmod 044F  
                  __ptext1 0414                    __ptext2 0622                    __ptext3 07F4  
                  __ptext4 0261                    __ptext5 0491                    __ptext6 044F  
                  __ptext7 0793                    __ptext8 0722                    __ptext9 0483  
          __size_of_printf 01B3               __size_of_ISR 007C                  _T1CONbits 0010  
                  _dpowers 0512                    _isdigit 0483          __end_of_read_char 0800  
        __end_of_read_line 06A6           _setup_peripheals 0414                    clrloop0 049C  
     end_of_initialization 002E                  _RCSTAbits 0018                    printf@c 0040  
                  printf@f 002B               __pstringtext 0500                  _PORTAbits 0005  
                _PORTBbits 0006                  _PORTCbits 0007                  _TRISCbits 0087  
              printf@width 003E                  _TXSTAbits 0098             __end_of___wmul 07F4  
           __end_of_printf 0414        start_initialization 0015                __end_of_ISR 0722  
                 ??___wmul 0075           read_line@max_len 0076                   ??_printf 0033  
               read_line@c 0025                 read_line@i 0023                 read_line@s 0022  
              __pbssCOMMON 0078                  ___latbits 0002              __pcstackBANK0 0020  
         ___lwdiv@dividend 0022   __end_of_setup_peripheals 044F                   ?___lwdiv 0020  
                 ?___lwmod 0027                   ?_isdigit 0070           ___lwdiv@quotient 0025  
                _read_char 07F4                  _read_line 0622             __size_of_putch 000A  
        interrupt_function 0004             ___wmul@product 0075                  clear_ram0 049B  
                 _PIE1bits 008C                   _PIR1bits 000C                __stringbase 0512  
               _ADCON1bits 009F          ___wmul@multiplier 0020                 printf@flag 0036  
               printf@prec 003A                 ?_read_char 0070                 ?_read_line 0076  
         __size_of___lwdiv 003E           __size_of___lwmod 0034         __end_of__stringtab 0512  
              _isdigit$691 0075           __size_of_isdigit 000E            ___lwdiv@divisor 0020  
          ___lwdiv@counter 0024                   __ptext10 07D1                   __ptext11 06A6  
            __size_of_atoi 0071              __size_of_main 022F                   atoi@sign 0028  
                printf@len 003C                   main@argc 0041                   main@argv 0043  
                printf@val 0038                 _INTCONbits 000B                   isdigit@c 0076  
              ??_read_char 0075                ??_read_line 0020                   intlevel1 0000  
         ___lwmod@dividend 0029                  stringcode 050A                   printf@ap 003B  
                 printf@cp 0037          ?_setup_peripheals 0070         ??_setup_peripheals 0075  
          ___lwmod@divisor 0027            ___lwmod@counter 0077                   stringtab 0500  
